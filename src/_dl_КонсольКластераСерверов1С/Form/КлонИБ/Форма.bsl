
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЕстьПромежуточныеДанные() Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВопрос;
	Иначе
		ПервичноеЗаполнение();
	КонецЕсли;
	
КонецПроцедуры      

&НаКлиенте
Процедура ПродолжитьРедактирование(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаполнениеПараметров; 
	ВосстановитьКлючевыеПараметры();
	ВосстановитьПараметры(); 
	
	ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоСерверов.ПолучитьЭлементы(), "ДеревоСерверов", Истина);
	ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоРеквизитов.ПолучитьЭлементы(), "ДеревоРеквизитов", Истина);
	
КонецПроцедуры  

&НаКлиенте
Процедура СоздатьНовыеДанные(Команда)
	
	ОчиститьВсеПредзаполненныеДанныеВРС();
	ПервичноеЗаполнение();	

КонецПроцедуры

&НаСервере
Процедура ПервичноеЗаполнение()

	Если Параметры.Свойство("ИБ") Тогда  
		Элементы.Страницы.ТекущаяСтраница 	= Элементы.СтраницаМестоРазвертки;
		ТекущаяИБ 							= Параметры.ИБ;   
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_КонфигурационныеЕдиницы.Ссылка КАК ИнформационнаяБаза,
		|	_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ЗначениеДопРеквизита КАК Описание
		|ИЗ
		|	Справочник._dl_КонфигурационныеЕдиницы КАК _dl_КонфигурационныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц КАК _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц
		|		ПО (_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.КонфигурационнаяЕдиница = _dl_КонфигурационныеЕдиницы.Ссылка
		|				И _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ТипДопРеквизита = ЗНАЧЕНИЕ(Справочник._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ИнформационнаяБаза1С_Описание))
		|ГДЕ
		|	_dl_КонфигурационныеЕдиницы.Тип = ЗНАЧЕНИЕ(Справочник._dl_ТипыКонфигурационныхЕдиниц.ИнформационнаяБаза1С)
		|	И _dl_КонфигурационныеЕдиницы.КатегорияТипа = ЗНАЧЕНИЕ(Справочник._dl_КатегорииТиповКонфигурационныхЕдиниц.Сервис)
		|	И НЕ _dl_КонфигурационныеЕдиницы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	_dl_КонфигурационныеЕдиницы.Наименование";
		
		ТаблицаИБ.Загрузить(Запрос.Выполнить().Выгрузить());		
	КонецЕсли;    
	
	Элементы.Назад1.Видимость = НЕ Параметры.Свойство("ИБ");	

КонецПроцедуры

&НаСервере
Функция ЕстьПромежуточныеДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента = ""ТекущаяИБ""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Элементы.НадписьВопрос.Заголовок = "Существуют предзаполненные данные по информационной базе "+Выборка.Значение;	
	КонецЕсли;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура НоваяИнфраструктура(Команда)

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки;	
	ТекущееМестоРазвертки = "Новая";
	
КонецПроцедуры

&НаКлиенте
Процедура ОблачнаяИнфраструктура(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака;
	ТекущееМестоРазвертки = "Облачная";
	
КонецПроцедуры 

&НаКлиенте
Процедура ВсеНаОдном(Команда)
	
	ТекущееШаблонРазвертки = "ВсеНаОдном";  
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура Кластер(Команда)
	
	ТекущееШаблонРазвертки = "Кластер";   
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
		
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака Тогда 
		Если Не ЗначениеЗаполнено(Облако) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано облако");
			Возврат;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы; 
		ТекущееШаблонРазвертки = "ВсеНаОдном"; 
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы Тогда
		Если Не ЗначениеЗаполнено(ОперационнаяСистема) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана операционная система");
			Возврат;
		КонецЕсли;
		
		ЗаполнитьКластерВиртуализацииПоУмолчанию();
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКластерВиртуализации;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ Тогда
		ТекущиеДанные = Элементы.ТаблицаИБ.ТекущиеДанные;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИнформационнаяБаза) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана информационная база");
			Возврат;
		КонецЕсли;
		
		ТекущаяИБ = ТекущиеДанные.ИнформационнаяБаза; 
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;  
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКластерВиртуализации Тогда
		Отказ = Ложь;
		ПроверитьЗаполнениеПараметровКластераВиртуализации(Отказ); 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДоменКомпанииПоУмолчанию();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоменКомпании;	
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоменКомпании Тогда 
		Если Не ЗначениеЗаполнено(ДоменКомпании) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран домен компании");
			Возврат;
		КонецЕсли;	
		
		ЗаполнитьДомен();         
		ЗаполнитьIpиИменаПоУмолчанию();
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГенерацияДиапазоновIpиИмен; 
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГенерацияДиапазоновIpиИмен Тогда 
		Отказ = Ложь;
		ПроверитьЗаполнениеДиапазонаIpиИмен(Отказ); 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТаблицуIpиИмен();  
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаIpИИмен;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаIpИИмен Тогда
		Отказ = Ложь;
		ПроверитьЗаполнениеIpиИмен(Отказ); 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;		
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаполнениеПараметров; 

		ЗаполнитьПараметры(); 
		ЗаписатьКлючевыеПараметры();
		
		ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоСерверов.ПолучитьЭлементы(), "ДеревоСерверов", Истина);
		ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоРеквизитов.ПолучитьЭлементы(), "ДеревоРеквизитов", Истина);	
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьПрогресс()

	_dl_СозданиеИнфраструктуры.ЗаполнитьПрогресс(ЭтаФорма, ЗаданиеНаСозданиеИнфраструктуры);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПрогресс() Экспорт
	
	Счетчик = 1;
	Для каждого СтрокаДерева Из ДеревоПрогресса.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.ИндексКартинки = 0;

		СчетчикДетальные = 1;
		Для каждого ДетальнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл				
			Задержка();
			
			ДетальнаяСтрока.ИндексКартинки = 0;
			
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = СчетчикДетальные 
				И Счетчик <> 1 Тогда
				
				ДетальнаяСтрока.ИндексКартинки = 2;
				
			КонецЕсли;
			
			СчетчикДетальные = СчетчикДетальные + 1;
		КонецЦикла;
		
		Задержка();	
		
		Если ДеревоПрогресса.ПолучитьЭлементы().Количество() = Счетчик Тогда
			
			СтрокаДерева.ИндексКартинки = 2;
			
		КонецЕсли;
				
		Счетчик = Счетчик + 1;
	КонецЦикла;	

КонецПроцедуры   

&НаСервере
Процедура Задержка()
	
	б = 0;
	Для А = 1 По 10000 Цикл
		б = б + 1;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы Тогда 
		Если ТекущееМестоРазвертки = "Новая" Тогда           
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки;
		ИначеЕсли ТекущееМестоРазвертки = "Облачная" Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака;	
		КонецЕсли; 
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКластерВиртуализации Тогда		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы;		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоменКомпании Тогда 		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКластерВиртуализации;	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГенерацияДиапазоновIpиИмен Тогда  
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоменКомпании;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаIpИИмен Тогда  
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГенерацияДиапазоновIpиИмен;
	КонецЕсли;                                

КонецПроцедуры

&НаСервере
Процедура ВосстановитьПараметры()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов КАК ГруппировкаСерверов
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяЭлемента
		|ИТОГИ ПО
		|	ГруппировкаСерверов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ОдиночныеГруппировки = Выборка.ГруппировкаСерверов = "VMs" 
			ИЛИ Выборка.ГруппировкаСерверов = "SQLClusters"
			ИЛИ Выборка.ГруппировкаСерверов = "1CClusters";
		
		ВыборкаДетальных = Выборка.Выбрать();
		Пока ВыборкаДетальных.Следующий() Цикл	
			Если ОдиночныеГруппировки Тогда	
				ТекущееИмяЭлемента 				= ВыборкаДетальных.ИмяЭлемента; 
				ТекущийИдентификаторЭлемента 	= ВыборкаДетальных.ИдентификаторЭлемента;  
				ТекущаяГруппировкаСерверов 		= ВыборкаДетальных.ГруппировкаСерверов;
				
				ЗаписатьЭлементыВДерево(ДеревоСерверов, Истина);  
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;  
	
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл	
		ОдиночныеГруппировки = Выборка.ГруппировкаСерверов = "VMs" 
			ИЛИ Выборка.ГруппировкаСерверов = "SQLClusters"
			ИЛИ Выборка.ГруппировкаСерверов = "1CClusters";
			
		Если НЕ ОдиночныеГруппировки Тогда
			ТекущееИмяЭлемента 				= Выборка.ГруппировкаСерверов; 
			ТекущийИдентификаторЭлемента 	= "";  
			ТекущаяГруппировкаСерверов 		= Выборка.ГруппировкаСерверов;
			
			СтрокаДереваГруппировка = ЗаписатьГруппировкуРеквизитовВДерево(ДеревоСерверов);
			ОдиночныеГруппировки = Ложь;
		КонецЕсли;
		
		ВыборкаДетальных = Выборка.Выбрать();
		Пока ВыборкаДетальных.Следующий() Цикл	
			Если НЕ ОдиночныеГруппировки Тогда	
				ТекущееИмяЭлемента 				= ВыборкаДетальных.ИмяЭлемента; 
				ТекущийИдентификаторЭлемента 	= ВыборкаДетальных.ИдентификаторЭлемента;  
				ТекущаяГруппировкаСерверов 		= ВыборкаДетальных.ГруппировкаСерверов;
				
				ЗаписатьЭлементыВДерево(СтрокаДереваГруппировка, Ложь); 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПараметры()
		
	ОбщиеVM_AD			= ПолучитьРеквизитыИзМакета("ОбщиеVM_AD"); 
	ОбщиеVM_endpoint 	= ПолучитьРеквизитыИзМакета("ОбщиеVM_endpoint");
	ОбщиеVM_vSphere 	= ПолучитьРеквизитыИзМакета("ОбщиеVM_vSphere");
	ОбщиеVM_advanced 	= ПолучитьРеквизитыИзМакета("ОбщиеVM_advanced");
	
	ОбщиеSQL_advanced 	= ПолучитьРеквизитыИзМакета("ОбщиеSQL_advanced");
	Общие1С_advanced 	= ПолучитьРеквизитыИзМакета("Общие1С_advanced");

	РеквизитыVM 		= ПолучитьРеквизитыИзМакета("РеквизитыVM");
	РеквизитыSQL 		= ПолучитьРеквизитыИзМакета("РеквизитыSQL"); 
	Реквизиты1С 		= ПолучитьРеквизитыИзМакета("РеквизитыКластер1С"); 
	
	РеквизитыДиска 		= ПолучитьРеквизитыИзМакета("РеквизитыДиска");
	
	ЗначенияПоУмолчанию = ПолучитьДанныеПоУмолчанию();
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда
		
		Если ТаблицаИменIpИИмен.Количество() = 1 Тогда
			ТекущееИмяЭлемента = ТаблицаИменIpИИмен[0].name;
		Иначе
			ТекущееИмяЭлемента = "Server";
		КонецЕсли;	
		 
		ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
		ТекущаяГруппировкаСерверов 		= "";				
			
		ЗаписатьЭлементыВДерево(ДеревоСерверов, Истина);
		
		ЗаписатьРеквизитыВРС(РеквизитыVM, 	ЗначенияПоУмолчанию);
		ЗаписатьРеквизитыВРС(РеквизитыSQL, 	ЗначенияПоУмолчанию);
		ЗаписатьРеквизитыВРС(Реквизиты1С, 	ЗначенияПоУмолчанию);
		
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда		
				
		ТекущееИмяЭлемента 				= "Virtual machines"; 
		ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
		ТекущаяГруппировкаСерверов 		= "VMs";
		
		ЗаписатьЭлементыВДерево(ДеревоСерверов, Истина); 
		ЗаписатьРеквизитыВРС(ОбщиеVM_AD, 		ЗначенияПоУмолчанию, "AD");
		ЗаписатьРеквизитыВРС(ОбщиеVM_endpoint, 	ЗначенияПоУмолчанию, "Endpoint");
		ЗаписатьРеквизитыВРС(ОбщиеVM_vSphere, 	ЗначенияПоУмолчанию, "vSphere");
		ЗаписатьРеквизитыВРС(ОбщиеVM_advanced, 	ЗначенияПоУмолчанию, "Advanced");
		
		ТекущееИмяЭлемента 				= "SQL cluster"; 
		ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
		ТекущаяГруппировкаСерверов 		= "SQLClusters";   
		
		ЗаписатьЭлементыВДерево(ДеревоСерверов, Истина);
		ЗаписатьРеквизитыВРС(ОбщиеSQL_advanced, ЗначенияПоУмолчанию, "Advanced");
		
		ТекущееИмяЭлемента 				= "1C cluster"; 
		ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
		ТекущаяГруппировкаСерверов 		= "1CClusters";  
		
		ЗаписатьЭлементыВДерево(ДеревоСерверов, Истина); 
		ЗаписатьРеквизитыВРС(Общие1С_advanced, ЗначенияПоУмолчанию, "Advanced"); 
		
		МассивГруппировокЭлементов 	= Новый Массив;
		МассивГруппировокЭлементов.Добавить("Application servers");
		МассивГруппировокЭлементов.Добавить("Monitor nodes");
		МассивГруппировокЭлементов.Добавить("Data nodes");
		
		Если ТаблицаИменIpИИмен.Количество() = 6 Тогда //6я SQL - cluster
			ИмяНоды1 = ТаблицаИменIpИИмен[0].name;
			ИмяНоды2 = ТаблицаИменIpИИмен[1].name;
			ИмяНоды3 = ТаблицаИменIpИИмен[2].name;
			ИмяНоды4 = ТаблицаИменIpИИмен[3].name;
			ИмяНоды5 = ТаблицаИменIpИИмен[4].name;
		Иначе
			ИмяНоды1 = "App server 1";
			ИмяНоды2 = "App server 2";
			ИмяНоды3 = "Monitor node";
			ИмяНоды4 = "Master data node";
			ИмяНоды5 = "Secondary data node";
		КонецЕсли;
		
		Для каждого ГруппировкаЭлементов Из МассивГруппировокЭлементов Цикл			
			ТекущееИмяЭлемента 			= ГруппировкаЭлементов;
			СоответствиеИменЭлементов 	= Новый Соответствие; 
			МассивРеквизитов 			= Новый Массив; 
			СтруктураРеквизитов			= Новый Структура;
			
			Если ГруппировкаЭлементов = "Application servers" Тогда
				СоответствиеИменЭлементов.Вставить(ИмяНоды1, "VM1");
				СоответствиеИменЭлементов.Вставить(ИмяНоды2, "VM2"); 
				
				СтруктураРеквизитов.Вставить("VM", РеквизитыVM);
				СтруктураРеквизитов.Вставить("Кластер1С", Реквизиты1С);
				
				ТекущаяГруппировкаСерверов	= "Application servers";
			ИначеЕсли ГруппировкаЭлементов = "Monitor nodes" Тогда 
				СоответствиеИменЭлементов.Вставить(ИмяНоды3, "VM3");
				
				СтруктураРеквизитов.Вставить("VM", РеквизитыVM);
				СтруктураРеквизитов.Вставить("SQL", РеквизитыSQL);
				
				ТекущаяГруппировкаСерверов	= "Monitor nodes";
			ИначеЕсли ГруппировкаЭлементов = "Data nodes" Тогда
				СоответствиеИменЭлементов.Вставить(ИмяНоды4, "VM4");
				СоответствиеИменЭлементов.Вставить(ИмяНоды5, "VM5");
				
				СтруктураРеквизитов.Вставить("VM", РеквизитыVM);
				СтруктураРеквизитов.Вставить("SQL", РеквизитыSQL);
				
				ТекущаяГруппировкаСерверов	= "Data nodes";
			КонецЕсли;    
			
			СтрокаДереваГруппировка = ЗаписатьГруппировкуРеквизитовВДерево(ДеревоСерверов);
			
			Для каждого Стр Из СоответствиеИменЭлементов Цикл 
				ТекущееИмяЭлемента 				= Стр.Ключ;
				ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
				
				ЗаписатьЭлементыВДерево(СтрокаДереваГруппировка, Ложь);
								
				Для каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
					ЗаписатьРеквизитыВРС(ЭлементСтруктуры.Значение, ЗначенияПоУмолчанию, ЭлементСтруктуры.Ключ);
				КонецЦикла;   
				
				ЗаполнитьДискиПоНодам(РеквизитыДиска, Стр.Значение, ЗначенияПоУмолчанию);
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДискиПоНодам(ТЗРеквизиты, ИмяНоды, ЗначенияПоУмолчанию)
	
	Если ИмяНоды <> "" Тогда
		Если ЗначенияПоУмолчанию.Свойство(ИмяНоды) Тогда 
			//Общие реквизиты для Ноды
			Для каждого Элемент Из ЗначенияПоУмолчанию[ИмяНоды] Цикл
				Найденные = ТЗРеквизиты.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));
				Для каждого Найденная Из Найденные Цикл
					Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();
					
					ЗаполнитьЗначенияСвойств(Запись, Найденная);
					
					Запись.ИмяЭлемента 				= ТекущееИмяЭлемента;
					Запись.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
					Запись.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;
					Запись.МестоИспользования		= "КластерСерверов"; 
					Запись.ГруппировкаРеквизитов	= ТекущаяГруппировкаСерверов;
					Запись.Значение					= Элемент.Значение;
					Запись.Порядок					= Найденная.Порядок;
					
					Запись.Записать();		
				КонецЦикла;
			КонецЦикла;
			
			//Количество дисков
			ЗаписатьПримерВРС(ТекущийИдентификаторЭлемента, 
				"cba48746-01d2-447a-aea1-f2de5f9787f2", 
				ТекущийРодительРеквизита, 
				""+ЗначенияПоУмолчанию[ИмяНоды].Диски.Количество());
			
			//Реквизиты дисков
			Если ЗначенияПоУмолчанию[ИмяНоды].Свойство("Диски") Тогда
				Для А = 0 По ЗначенияПоУмолчанию[ИмяНоды].Диски.Количество()-1 Цикл
					ПараметрыДанных = Новый Структура;       
					ПараметрыДанных.Вставить("КоличествоТекущее", 				А);
					ПараметрыДанных.Вставить("КоличествоНовое", 				А+1);
					ПараметрыДанных.Вставить("ВыбранныйИдентификаторРеквизита", "cba48746-01d2-447a-aea1-f2de5f9787f2");
					ПараметрыДанных.Вставить("ТекущаяСтрока", 					0);
					ПараметрыДанных.Вставить("ДобавитьВДерево", 				Ложь);
					
					//ТекущийИдентификаторЭлемента 	= "";  
					//ТекущееЗначение				= "";
					
					//ТекущийИдентификаторЭлемента = Неопределено;
					ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных);		
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.РодительРеквизита КАК РодительРеквизита,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИмяВAPI КАК ИмяВAPI
					|ИЗ
					|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ1
					|		ПО _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = _dl_ПромежуточноеЗаполнениеКЕ1.РодительРеквизита
					|ГДЕ
					|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит = &Реквизит
					|	И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента = &ИдентификаторЭлемента";
					
					Запрос.УстановитьПараметр("Реквизит", 				"Диск "+(А+1));
					Запрос.УстановитьПараметр("ИдентификаторЭлемента", 	ТекущийИдентификаторЭлемента);
					
					ТЗРеквизитовДиска = Запрос.Выполнить().Выгрузить();
					
					Для каждого ЭлементСтруктуры Из ЗначенияПоУмолчанию[ИмяНоды].Диски[А] Цикл
						НайденныеСтроки = ТЗРеквизитовДиска.НайтиСтроки(Новый Структура("ИмяВAPI", ЭлементСтруктуры.Ключ));	
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
							НайденнаяСтрока.ИдентификаторРеквизита, 
							НайденнаяСтрока.РодительРеквизита, 
							ЭлементСтруктуры.Значение);
						КонецЦикла;	
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьКлючевыеПараметры()
	
	КлючевыеПараметры = Новый Массив;
	КлючевыеПараметры.Добавить("ТекущаяИБ");
	КлючевыеПараметры.Добавить("ОперационнаяСистема");
	КлючевыеПараметры.Добавить("Облако"); 
	КлючевыеПараметры.Добавить("ТекущееШаблонРазвертки");	
	КлючевыеПараметры.Добавить("ТекущееМестоРазвертки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента В(&КлючевыеПараметры)
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
	
	Запрос.УстановитьПараметр("КлючевыеПараметры", КлючевыеПараметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Этаформа[Выборка.ИмяЭлемента] = Выборка.Значение;
	КонецЦикла;
  
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКлючевыеПараметры()

	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();	
	Запись.ИмяЭлемента 				= "ТекущаяИБ";
	Запись.ИдентификаторЭлемента 	= Новый УникальныйИдентификатор;
	Запись.МестоИспользования		= "КластерСерверов"; 
	Запись.Значение					= ТекущаяИБ;
	Запись.Отображать				= Ложь;
	
	Запись.Записать();  
	
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();	
	Запись.ИмяЭлемента 				= "ОперационнаяСистема";
	Запись.ИдентификаторЭлемента 	= Новый УникальныйИдентификатор;
	Запись.МестоИспользования		= "КластерСерверов"; 
	Запись.Значение					= ОперационнаяСистема;
	Запись.Отображать				= Ложь;
	
	Запись.Записать(); 
	
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();	
	Запись.ИмяЭлемента 				= "Облако";
	Запись.ИдентификаторЭлемента 	= Новый УникальныйИдентификатор;
	Запись.МестоИспользования		= "КластерСерверов"; 
	Запись.Значение					= Облако;
	Запись.Отображать				= Ложь;
	
	Запись.Записать();
	
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();	
	Запись.ИмяЭлемента 				= "ТекущееШаблонРазвертки";
	Запись.ИдентификаторЭлемента 	= Новый УникальныйИдентификатор;
	Запись.МестоИспользования		= "КластерСерверов"; 
	Запись.Значение					= ТекущееШаблонРазвертки;
	Запись.Отображать				= Ложь;
	
	Запись.Записать();
	
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();	
	Запись.ИмяЭлемента 				= "ТекущееМестоРазвертки";
	Запись.ИдентификаторЭлемента 	= Новый УникальныйИдентификатор;
	Запись.МестоИспользования		= "КластерСерверов"; 
	Запись.Значение					= ТекущееМестоРазвертки;
	Запись.Отображать				= Ложь;
	
	Запись.Записать();
  
КонецПроцедуры

&НаСервере
Функция ЗаписатьГруппировкуРеквизитовВДерево(Дерево)
	
	СтрокаРодитель							= Дерево.ПолучитьЭлементы().Добавить();
	СтрокаРодитель.ИмяЭлемента          	= ТекущееИмяЭлемента; 
	СтрокаРодитель.Редактируемый			= Истина;
	СтрокаРодитель.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;
	
	Возврат СтрокаРодитель;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЭлементыВДерево(Дерево, Редактируемый = Ложь)
	
	СтрокаДерева						= Дерево.ПолучитьЭлементы().Добавить();
	СтрокаДерева.ИмяЭлемента            = ТекущееИмяЭлемента;
	СтрокаДерева.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
	СтрокаДерева.Редактируемый			= Редактируемый;
	СтрокаДерева.ГруппировкаСерверов	= ТекущаяГруппировкаСерверов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыВРС(ТЗРеквизиты, ЗначенияПоУмолчанию, ГруппировкаРеквизитов = "")
		
	Для каждого СтрокаТЗ Из ТЗРеквизиты Цикл 
		
		Если ЗначенияПоУмолчанию.Свойство(СтрокаТЗ.ИмяВAPI) Тогда
			Значение = ЗначенияПоУмолчанию[СтрокаТЗ.ИмяВAPI];
		Иначе
			Значение = СтрокаТЗ.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТЗ);
		
		Запись.ИмяЭлемента 				= ТекущееИмяЭлемента;
		Запись.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
		Запись.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;
		Запись.МестоИспользования		= "КластерСерверов"; 
		Запись.ГруппировкаРеквизитов	= ГруппировкаРеквизитов;
		Запись.Значение					= Значение;
		Запись.Порядок					= СтрокаТЗ.Порядок;
		
		Запись.Записать();	
	КонецЦикла;	
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьРеквизитыИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("РеквизитыСерверов");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	КвалификаторСтрока1 = Новый КвалификаторыСтроки(150);
	КвалификаторСтрока2 = Новый КвалификаторыСтроки(1000);
	КвалификаторСтрока3 = Новый КвалификаторыСтроки(36);  
	КвалификаторЧисло 	= Новый КвалификаторыЧисла(10,0);

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Реквизит", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1)); 
	ТЗ.Колонки.Добавить("Описание", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока2)); 
	ТЗ.Колонки.Добавить("ИмяВAPI", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("ЗначениеПоУмолчанию", 		Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("Regex", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("ИдентификаторРеквизита", 	Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3)); 
	ТЗ.Колонки.Добавить("Отображать", 				Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ОбязателенДляЗаполнения", 	Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ТипЗначения", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3));
	ТЗ.Колонки.Добавить("Перечисление", 			Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3));
	ТЗ.Колонки.Добавить("Порядок", 					Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		СтрокаТЗ 							= ТЗ.Добавить();
		СтрокаТЗ.Реквизит 					= Область.Область(ИндСтроки, 1, ИндСтроки, 1).Текст;
		СтрокаТЗ.Описание 					= Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст;
		СтрокаТЗ.ИмяВAPI 					= Область.Область(ИндСтроки, 3, ИндСтроки, 3).Текст;
		СтрокаТЗ.ЗначениеПоУмолчанию 		= Область.Область(ИндСтроки, 4, ИндСтроки, 4).Текст;
		СтрокаТЗ.Regex 						= Область.Область(ИндСтроки, 5, ИндСтроки, 5).Текст;
		СтрокаТЗ.ИдентификаторРеквизита 	= Область.Область(ИндСтроки, 6, ИндСтроки, 6).Текст;
		СтрокаТЗ.Отображать                 = Область.Область(ИндСтроки, 7, ИндСтроки, 7).Текст;
		СтрокаТЗ.ОбязателенДляЗаполнения 	= Область.Область(ИндСтроки, 8, ИндСтроки, 8).Текст;
		СтрокаТЗ.ТипЗначения 				= Область.Область(ИндСтроки, 9, ИндСтроки, 9).Текст; 
		СтрокаТЗ.Перечисление 				= Область.Область(ИндСтроки, 10, ИндСтроки, 10).Текст; 
		СтрокаТЗ.Порядок 					= Область.Область(ИндСтроки, 11, ИндСтроки, 11).Текст;
	КонецЦикла;
	 
	Возврат ТЗ; 
	
КонецФункции

&НаСервере
Функция ПолучитьПеречислениеИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("ПеречисленияЗначений");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	МассивПеречисления = Новый Массив;
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		МассивПеречисления.Добавить(Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст);
	КонецЦикла;
	 
	Возврат МассивПеречисления; 
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияПоУмолчаниюИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("ЗначенияПоУмолчаниюПоНодам");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Структура = Новый Структура;
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		Структура.Вставить(Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст, Область.Область(ИндСтроки, 3, ИндСтроки, 3).Текст);
	КонецЦикла;
	 
	Возврат Структура; 
	
КонецФункции

&НаКлиенте
Процедура Готово(Команда)  
	
	ГотовоНаСервере();
		
	ПодключитьОбработчикОжидания("ОбновитьСтатусы", 60, Ложь);
	
КонецПроцедуры  

&НаСервере
Процедура ГотовоНаСервере()
	
	Отказ = Ложь;
	ПроизвестиПроверкиПередСозданиемИнфраструктуры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПрогресса;

	СоздатьИнфраструктуру();	
		
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьСтатусы() Экспорт 
	
	ЗаполнитьПрогресс();
	
	Элементы.ДеревоПрогресса.Обновить();
	//ЭтаФорма.Прочитать();
	//ЭтаФорма.ОбновитьОтображениеДанных();
	
	ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоПрогресса.ПолучитьЭлементы(), "ДеревоПрогресса", Истина);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИнфраструктуру()
	
	СпрИнфраструктура 				= Справочники._dl_ЗаданиеНаСозданиеИнфраструктуры.СоздатьЭлемент();
	СпрИнфраструктура.Наименование 	= "Контур для базы "+ТекущаяИБ;
	
	РеквизитыVMs		= ПолучитьРеквизитыИзМакета("ОбщиеРеквизитыВиртМашин");
	РеквизитыVM 		= ПолучитьРеквизитыИзМакета("ВиртМашина");
	МассивVM 			= ПолучитьМассивРеквизитовИзДвухТЗ(РеквизитыVMs, РеквизитыVM);
  	
	РеквизитыSQLs 		= ПолучитьРеквизитыИзМакета("ОбщиеРеквизитыSQL");		
	РеквизитыSQL 		= ПолучитьРеквизитыИзМакета("РеквизитыSQL");   
	МассивSQL 			= ПолучитьМассивРеквизитовИзДвухТЗ(РеквизитыSQLs, РеквизитыSQL);
	
	Реквизиты1Cs 		= ПолучитьРеквизитыИзМакета("ОбщиеРеквизитыКластер1С");
	Реквизиты1С 		= ПолучитьРеквизитыИзМакета("РеквизитыКластер1С"); 
	Массив1C 			= ПолучитьМассивРеквизитовИзДвухТЗ(Реквизиты1Cs, Реквизиты1С);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""VMs""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента = ""Virtual machines""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""VM""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> """"
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> ""VMs""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""VM""
		|ИТОГИ ПО
		|	ИдентификаторЭлемента,
		|	ИмяЭлемента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""SQLClusters""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента = ""SQL cluster""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""SQL""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> """"
		|			И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> ""SQLClusters""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""SQL""
		|ИТОГИ ПО
		|	ИмяЭлемента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""1CClusters""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента = ""1C cluster""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""Кластер1С""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> """"
		|			И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов <> ""1CClusters""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов = ""Кластер1С""
		|ИТОГИ ПО
		|	ИмяЭлемента";		
	Запрос.УстановитьПараметр("МассивVM", 	МассивVM);
	Запрос.УстановитьПараметр("МассивSQL", 	МассивSQL);
	Запрос.УстановитьПараметр("Массив1C", 	Массив1C);
		
	Пакет = Запрос.ВыполнитьПакет();
	
	//ВыборкаОбъекты 	= Пакет[0].Выбрать(); 
	ВыборкаОбщиеVM 	= Пакет[0].Выбрать();
	ВыборкаVM 		= Пакет[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщиеSQL	= Пакет[2].Выбрать();
	ВыборкаSQL 		= Пакет[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщие1С 	= Пакет[4].Выбрать();
	Выборка1С 		= Пакет[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//Общие VM 
	VMОбщийСоответствие = Новый Соответствие;	
	Пока ВыборкаОбщиеVM.Следующий() Цикл	
		ПриведенноеЗначение = ПривестиЗначениеКТипу(ВыборкаОбщиеVM.Значение, ВыборкаОбщиеVM.ТипЗначения);
		Если ПриведенноеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		VMОбщийСоответствие.Вставить(ВыборкаОбщиеVM.ИмяВAPI, ПриведенноеЗначение);		
	КонецЦикла;
	
	//Отдельная VM
	Пока ВыборкаVM.Следующий() Цикл	
		ВыборкаИмяЭлемента = ВыборкаVM.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);  
		Пока ВыборкаИмяЭлемента.Следующий() Цикл	
			////Объект
			//СтрокаОбъекты 						= СпрИнфраструктура.ОбъектыИнфраструктуры.Добавить();
			//СтрокаОбъекты.ИмяОбъекта 			= ВыборкаИмяЭлемента.ИмяЭлемента;
			//СтрокаОбъекты.ИдентификаторОбъекта 	= ВыборкаИмяЭлемента.ИдентификаторЭлемента; 
			//СтрокаОбъекты.Статус 				= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
			
			ВыборкаДетальные = ВыборкаИмяЭлемента.Выбрать();  
			 
			СоответствиеVM = Новый Соответствие;
			СобратьКонфигКубика(ВыборкаДетальные, СоответствиеVM);  
			
			Для каждого Элемент Из VMОбщийСоответствие Цикл
				СоответствиеVM.Вставить(Элемент.Ключ, Элемент.Значение);	
			КонецЦикла;       
			
			КонфигJSON = _dl_СозданиеИнфраструктуры.СтруктуруВJSON(СоответствиеVM);
			
			//Кубики    
			СпрПоручение 				= Справочники._dl_ПорученияПоСозданиюИнфраструктуры.СоздатьЭлемент();
			СпрПоручение.Наименование 	= "VM "+ВыборкаИмяЭлемента.ИмяЭлемента;
			СпрПоручение.task_status	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.ПустаяСсылка");
			СпрПоручение.КонфигJSON		= КонфигJSON;
			СпрПоручение.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.VM");
			
			//СтрокаЭлементыИнфраструктурыОбъектов 						= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
			//СтрокаЭлементыИнфраструктурыОбъектов.ИмяКубика 				= "VM "+ВыборкаИмяЭлемента.ИмяЭлемента;
			//СтрокаЭлементыИнфраструктурыОбъектов.task_status			= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.ПустаяСсылка");
			//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторОбъекта 	= ВыборкаИмяЭлемента.ИдентификаторЭлемента;
			//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторКубика	= Новый УникальныйИдентификатор;
			//СтрокаЭлементыИнфраструктурыОбъектов.КонфигКубика			= КонфигJSON;
			//СтрокаЭлементыИнфраструктурыОбъектов.Порядок				= 1;
			//СтрокаЭлементыИнфраструктурыОбъектов.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.VM");
						
			//Запрос в сервис    
			НастройкиСервера 	= ПолучитьНастройкиПодключенияКAPI(СпрПоручение.ШагСозданияИнфраструктуры);
			ДанныеОтвета 		= _dl_СозданиеИнфраструктуры.СоздатьИнфраструктуруВСервисе(КонфигJSON, НастройкиСервера);
			
			//Шаги выполнения
			Если ДанныеОтвета.Свойство("task_id") Тогда 
				СпрПоручение.task_id 		= ДанныеОтвета.task_id;
				СпрПоручение.task_status 	= _dl_СозданиеИнфраструктуры.ПолучитьСтатусПоСтроке(ДанныеОтвета.task_status);
				
				Для Каждого Стр Из ДанныеОтвета.step_list Цикл 
					НовСтр = СпрПоручение.ШагиВыполнения.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр); 
					
					//НовСтр.step_status = ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
				КонецЦикла;	

				
				//СтрокаЭлементыИнфраструктурыОбъектов.task_id 		= ДанныеОтвета.task_id;
				//СтрокаЭлементыИнфраструктурыОбъектов.task_status 	= Перечисления._dl_СтатусСозданияИнфраструктуры[ДанныеОтвета.task_status];
				//
				//Для Каждого Стр Из ДанныеОтвета.step_list Цикл 
				//	НовСтр = СпрИнфраструктура.ШагиВыполненияЭлементов.Добавить();
				//	ЗаполнитьЗначенияСвойств(НовСтр, Стр); 
				//	
				//	НовСтр.step_status = ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
				//	
				//	НовСтр.ИдентификаторОбъекта 			= ВыборкаИмяЭлемента.ИдентификаторЭлемента;
				//	НовСтр.ИдентификаторКубика 				= СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторКубика;
				//	НовСтр.ИдентификаторВыполненияЭлемента 	= Новый УникальныйИдентификатор;
				//КонецЦикла;	
			КонецЕсли;
			
			СпрПоручение.Записать();
			
			СтрПоручение 			= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
			СтрПоручение.Поручение 	= СпрПоручение.Ссылка; 
			СтрПоручение.Порядок	= 1; 
		КонецЦикла;		
	КонецЦикла;
	
	//Общие SQL  
	SQLОбщийСоответствие = Новый Соответствие;
	Пока ВыборкаОбщиеSQL.Следующий() Цикл	
		ПриведенноеЗначение = ПривестиЗначениеКТипу(ВыборкаОбщиеSQL.Значение, ВыборкаОбщиеSQL.ТипЗначения);
		Если ПриведенноеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		SQLОбщийСоответствие.Вставить(ВыборкаОбщиеSQL.ИмяВAPI, ПриведенноеЗначение);		
	КонецЦикла;
	
	//Отдельная SQL   
	//Объект
	//СтрокаОбъекты 						= СпрИнфраструктура.ОбъектыИнфраструктуры.Добавить();
	//СтрокаОбъекты.ИмяОбъекта 			= "SQL";
	//СтрокаОбъекты.ИдентификаторОбъекта 	= Новый УникальныйИдентификатор; 
	//СтрокаОбъекты.Статус 				= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
	
	СоответствиеSQL = Новый Соответствие;
	МассивНод		= Новый Массив;
	
	Пока ВыборкаSQL.Следующий() Цикл	
		ВыборкаДетальные = ВыборкаSQL.Выбрать();
		
		СоответствиеНода = Новый Соответствие;
		
		Если ВыборкаSQL.ИмяЭлемента = "Monitor node" Тогда
			Ключ = "monitor_node";
		ИначеЕсли ВыборкаSQL.ИмяЭлемента = "Master data node" Тогда
			Ключ = "master_node";
		ИначеЕсли ВыборкаSQL.ИмяЭлемента = "Secondary data node" Тогда
			Ключ = "second_node";  
		КонецЕсли;
		
		СоответствиеРеквизитовНоды = Новый Соответствие;
		СобратьКонфигКубика(ВыборкаДетальные, СоответствиеРеквизитовНоды);  
		
		Если Ключ = "second_node" Тогда
			Массив = Новый Массив;
			Массив.Добавить(СоответствиеРеквизитовНоды);    
			СоответствиеНода.Вставить(Ключ, Массив);
		Иначе
			СоответствиеНода.Вставить(Ключ, СоответствиеРеквизитовНоды);	
		КонецЕсли;
			
		МассивНод.Добавить(СоответствиеНода);
	КонецЦикла;		
	
	СоответствиеSQL.Вставить("node_server_connect_settings", 	МассивНод);
	СоответствиеSQL.Вставить("pg_cluster_settings", 			SQLОбщийСоответствие);
	
	КонфигJSON = _dl_СозданиеИнфраструктуры.СтруктуруВJSON(СоответствиеSQL);

	//Кубик SQL  
	
	//Кубики    
	СпрПоручение 				= Справочники._dl_ПорученияПоСозданиюИнфраструктуры.СоздатьЭлемент();
	СпрПоручение.Наименование 	= "SQL";
	СпрПоручение.task_status	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.ПустаяСсылка");
	СпрПоручение.КонфигJSON		= КонфигJSON;
	СпрПоручение.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.SQL");
	
	СпрПоручение.Записать();
	
	СтрПоручение 			= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
	СтрПоручение.Поручение 	= СпрПоручение.Ссылка; 
	СтрПоручение.Порядок	= 2; 
	
	//СтрокаЭлементыИнфраструктурыОбъектов 						= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
	//СтрокаЭлементыИнфраструктурыОбъектов.ИмяКубика 				= "SQL";
	//СтрокаЭлементыИнфраструктурыОбъектов.task_status 			= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
	//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторОбъекта 	= СтрокаОбъекты.ИдентификаторОбъекта;
	//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторКубика	= Новый УникальныйИдентификатор;
	//СтрокаЭлементыИнфраструктурыОбъектов.КонфигКубика			= КонфигJSON;
	//СтрокаЭлементыИнфраструктурыОбъектов.Порядок				= 2;
	//СтрокаЭлементыИнфраструктурыОбъектов.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.SQL");
	
	//Общие 1С 
	Кластер1СОбщийСоответствие = Новый Соответствие;
	Пока ВыборкаОбщие1С.Следующий() Цикл	
		ПриведенноеЗначение = ПривестиЗначениеКТипу(ВыборкаОбщие1С.Значение, ВыборкаОбщие1С.ТипЗначения);
		Если ПриведенноеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Кластер1СОбщийСоответствие.Вставить(ВыборкаОбщие1С.ИмяВAPI, ПриведенноеЗначение);		
	КонецЦикла;
	
	//Отдельная 1С      
	//Объект
	//СтрокаОбъекты 						= СпрИнфраструктура.ОбъектыИнфраструктуры.Добавить();
	//СтрокаОбъекты.ИмяОбъекта 			= "Кластер 1С";
	//СтрокаОбъекты.ИдентификаторОбъекта 	= Новый УникальныйИдентификатор; 
	//СтрокаОбъекты.Статус 				= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
	
	Соответствие1С 		= Новый Соответствие; 
	МассивAPPServers 	= Новый Массив;
	
	Пока Выборка1С.Следующий() Цикл	
		ВыборкаДетальные = Выборка1С.Выбрать();  
		
		СоответствиеAPPServer = Новый Соответствие;
		
		СоответствиеРеквизитовAPPServer = Новый Соответствие;
		СобратьКонфигКубика(ВыборкаДетальные, СоответствиеРеквизитовAPPServer);  
		
		СоответствиеAPPServer.Вставить(Выборка1С.ИмяЭлемента, СоответствиеРеквизитовAPPServer);
		МассивAPPServers.Добавить(СоответствиеAPPServer);    
	КонецЦикла;
	
	Соответствие1С.Вставить("ones_nodes", 						МассивAPPServers);
	Соответствие1С.Вставить("ones_cluster_settings", 			Кластер1СОбщийСоответствие);
	
	КонфигJSON = _dl_СозданиеИнфраструктуры.СтруктуруВJSON(Соответствие1С);
	
	//Кубик 1C   
	СпрПоручение 				= Справочники._dl_ПорученияПоСозданиюИнфраструктуры.СоздатьЭлемент();
	СпрПоручение.Наименование 	= "Кластер 1С";
	СпрПоручение.task_status	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.ПустаяСсылка");
	СпрПоручение.КонфигJSON		= КонфигJSON;
	СпрПоручение.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.Кластер1С");
	
	СпрПоручение.Записать();
	
	СтрПоручение 			= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
	СтрПоручение.Поручение 	= СпрПоручение.Ссылка; 
	СтрПоручение.Порядок	= 3; 

	//СтрокаЭлементыИнфраструктурыОбъектов 						= СпрИнфраструктура.ПорученияНаСозданиеИнфраструктуры.Добавить();
	//СтрокаЭлементыИнфраструктурыОбъектов.ИмяКубика 				= "Кластер 1С";
	//СтрокаЭлементыИнфраструктурыОбъектов.task_status			= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start");
	//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторОбъекта 	= СтрокаОбъекты.ИдентификаторОбъекта;
	//СтрокаЭлементыИнфраструктурыОбъектов.ИдентификаторКубика	= Новый УникальныйИдентификатор;
	//СтрокаЭлементыИнфраструктурыОбъектов.КонфигКубика			= КонфигJSON;
	//СтрокаЭлементыИнфраструктурыОбъектов.Порядок				= 3; 
	//СтрокаЭлементыИнфраструктурыОбъектов.ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.Кластер1С");
	
	СпрИнфраструктура.Записать();
	ЗаданиеНаСозданиеИнфраструктуры = СпрИнфраструктура.Ссылка;
	ЗаполнитьПрогресс(); 
	
	ОчиститьВсеПредзаполненныеДанныеВРС();
		
КонецПроцедуры 

&НаСервере
Функция ПолучитьМассивРеквизитовИзДвухТЗ(ТаблицаОбщих, ТаблицаЭлемента)
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаТЧ Из ТаблицаОбщих Цикл
		МассивРеквизитов.Добавить(СтрокаТЧ.ИмяВAPI);	
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ТаблицаЭлемента Цикл
		МассивРеквизитов.Добавить(СтрокаТЧ.ИмяВAPI);	
	КонецЦикла;
	
	Возврат МассивРеквизитов;

КонецФункции 

&НаСервере
Функция ПривестиЗначениеКТипу(Значение, ТипЗначения)
	
	ПриведенноеЗначение = Неопределено;
	
	Если ТипЗначения = "строка" Тогда   
		ПриведенноеЗначение = Значение;
	ИначеЕсли ТипЗначения = "число" Тогда
		Если Значение = "" Тогда
			ПриведенноеЗначение = 0;	
		ИначеЕсли _dl_ServiceDiscoveryВызовСервера.ЭтоЧисло(СокрЛП(Значение)) Тогда
			ПриведенноеЗначение = Число(Значение);
		Иначе
			ЗаписьЖурналаРегистрации("Сборка конфига создания инфраструктуры: не удалось преобразовать значение "+Значение+" к Числу", 
			УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;  
	ИначеЕсли ТипЗначения = "булево" Тогда
		Если Значение = "" Тогда
			ПриведенноеЗначение = Ложь;
		ИначеЕсли _dl_ServiceDiscoveryВызовСервера.ЭтоБулево(СокрЛП(Значение)) Тогда
			ПриведенноеЗначение = Булево(Значение);
		Иначе
			ЗаписьЖурналаРегистрации("Сборка конфига создания инфраструктуры: не удалось преобразовать значение "+Значение+" к Булево", 
			УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;	
	ИначеЕсли ТипЗначения = "СписокЗначений" Тогда
		ПриведенноеЗначение = СтрРазделить(Значение, ";", Ложь);	
	КонецЕсли;
	
	Возврат ПриведенноеЗначение;
	
КонецФункции 

&НаСервере
Процедура СобратьКонфигКубика(КоллекцияКубика, СоответствиеДанных)
		
	КвалификаторСтрока1 = Новый КвалификаторыСтроки(150);
	КвалификаторСтрока2 = Новый КвалификаторыСтроки(20);
	КвалификаторСтрока3 = Новый КвалификаторыСтроки(36); 
	КвалификаторСтрока4 = Новый КвалификаторыСтроки(50); 

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИдентификаторЭлемента", 	Новый ОписаниеТипов("УникальныйИдентификатор")); 
	ТЗ.Колонки.Добавить("ИдентификаторРеквизита", 	Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3)); 
	ТЗ.Колонки.Добавить("РодительРеквизита", 		Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3));
	ТЗ.Колонки.Добавить("ИмяВAPI", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("Значение", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("ТипЗначения", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока2)); 
	ТЗ.Колонки.Добавить("Regex", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока4));
	
	Пока КоллекцияКубика.Следующий() Цикл
		Если ЗначениеЗаполнено(КоллекцияКубика.РодительРеквизита) Тогда 
			СтрокаТЧ = ТЗ.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,КоллекцияКубика); 
			Продолжить;
		КонецЕсли;
		
		ПриведенноеЗначение = ПривестиЗначениеКТипу(КоллекцияКубика.Значение, КоллекцияКубика.ТипЗначения);
		Если ПриведенноеЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияКубика.ИмяВAPI = "disks" Тогда
			ПриведенноеЗначение = Новый Массив;
		КонецЕсли;
		
		СоответствиеДанных.Вставить(КоллекцияКубика.ИмяВAPI, ПриведенноеЗначение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втТЗ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	|	втТЗ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
	|	втТЗ.РодительРеквизита КАК РодительРеквизита,
	|	втТЗ.ИмяВAPI КАК ИмяВAPI,
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.ТипЗначения КАК ТипЗначения,
	|	втТЗ.Regex КАК Regex
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК втТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
	|	втТЗ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
	|	втТЗ.РодительРеквизита КАК РодительРеквизита,
	|	втТЗ.ИмяВAPI КАК ИмяВAPI,
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.ТипЗначения КАК ТипЗначения,
	|	втТЗ.Regex КАК Regex,
	|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлементаРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизитаРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPIРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначенияРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК RegexРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК ЗначениеРодитель,
	|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК РеквизитРодитель
	|ИЗ
	|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТЗ КАК втТЗ
	|		ПО _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = втТЗ.РодительРеквизита
	|			И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента = втТЗ.ИдентификаторЭлемента
	|ИТОГИ ПО
	|	ИдентификаторЭлементаРодитель,
	|	ИдентификаторРеквизитаРодитель,
	|	РеквизитРодитель";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторЭлементаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторЭлементаРодитель.Следующий() Цикл
		ВыборкаИдентификаторРеквизитаРодитель = ВыборкаИдентификаторЭлементаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		МассивДисков = Новый Массив;
		
		Пока ВыборкаИдентификаторРеквизитаРодитель.Следующий() Цикл
			ВыборкаРеквизитРодитель = ВыборкаИдентификаторРеквизитаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
			Пока ВыборкаРеквизитРодитель.Следующий() Цикл
				
				Если СтрНайти(ВыборкаРеквизитРодитель.РеквизитРодитель, "Диск ") = 1 Тогда
					Соответствие = Новый Соответствие; 
				Иначе
					Массив = Новый Массив;
				КонецЕсли;
					
				ВыборкаДетальные = ВыборкаРеквизитРодитель.Выбрать();
				Пока ВыборкаДетальные.Следующий() Цикл
					ПриведенноеЗначение = ПривестиЗначениеКТипу(ВыборкаДетальные.Значение, ВыборкаДетальные.ТипЗначения);
					Если ПриведенноеЗначение = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрНайти(ВыборкаРеквизитРодитель.РеквизитРодитель, "Диск ") = 1 Тогда
						Соответствие.Вставить(ВыборкаДетальные.ИмяВAPI, ПриведенноеЗначение);	
					Иначе
						Массив.Добавить(ВыборкаДетальные.Значение); 
						ИмяВAPIРодитель = ВыборкаДетальные.ИмяВAPIРодитель;
					КонецЕсли;	
				КонецЦикла;	
				
				Если СтрНайти(ВыборкаРеквизитРодитель.РеквизитРодитель, "Диск ") = 1 Тогда
					МассивДисков.Добавить(Соответствие);
				Иначе
					СоответствиеДанных.Вставить(ИмяВAPIРодитель, Массив);  
				КонецЕсли;
			КонецЦикла;		
		КонецЦикла;         
		СоответствиеДанных.Вставить("disks", МассивДисков);
	КонецЦикла;
	
КонецПроцедуры
  
&НаСервере
Процедура ПроизвестиПроверкиПередСозданиемИнфраструктуры(Отказ)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");// создаем объект для работы с регулярными выражениями
	RegExp.MultiLine = Истина;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global = Истина;     // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		Если Выборка.ОбязателенДляЗаполнения 
			И НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле """+Выборка.Реквизит+""" элемента "+Выборка.ИмяЭлемента+" не заполнено",,,,Отказ);			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.Значение) 
			И Выборка.Regex <> "" Тогда
			
			Если ЭтоДиапазонRegex(Выборка.Regex) Тогда				
				СтрокаКорректна = СтрокаВходитВДиапазон(Выборка.Значение, Выборка.Regex);	
			Иначе
				СтрокаКорректна = СтрокаКорректнаПоRegex(Выборка.Значение, Выборка.Regex, RegExp);
			КонецЕсли;
			
			Если Не СтрокаКорректна Тогда	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле """+Выборка.Реквизит+""" элемента "+Выборка.ИмяЭлемента+" не прошло проверку по шаблону",,,,Отказ);					
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры    

&НаСервере
Функция ЭтоДиапазонRegex(Regex)

	Возврат СтрНайти(Regex, "[") <> 0 
		И СтрНайти(Regex, "..") <> 0
		И СтрНайти(Regex, "]") <> 0; 
		
КонецФункции 
	
&НаСервере
Функция СтрокаВходитВДиапазон(Значение, Regex)

	СтрокаВходитВДиапазон = Истина;	
	
	Шаблон = СтрЗаменить(Regex, "[", "");
	Шаблон = СтрЗаменить(Шаблон, "]", "");
	Массив = СтрРазделить(СокрЛП(Шаблон), "..", Ложь);   
	Если Массив.Количество() = 2 Тогда
		НачалоДиапазона = Число(СокрЛП(Массив[0]));
		КонецДиапазона 	= Число(СокрЛП(Массив[1]));
		СтрокаВходитВДиапазон =  (Число(Значение) >= НачалоДиапазона) И (Число(Значение) <= КонецДиапазона);
	КонецЕсли;
		
	Возврат СтрокаВходитВДиапазон; 
		
КонецФункции 

&НаСервере
Функция СтрокаКорректнаПоRegex(Текст, Шаблон, RegExp)
				
	RegExp.Pattern = Шаблон;    // шаблон (регулярное выражение)
	
	Попытка
		Ответ = RegExp.Test(Текст); 
	Исключение
		Ответ = Ложь;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции 

&НаКлиенте
Процедура ДеревоСерверовПриАктивизацииСтроки(Элемент)
		
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ПодключитьОбработчикОжидания("ОбработатьСтрокуДереваСерверов", 0.1, Истина);

КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьСтрокуДереваСерверов() Экспорт
	
	ТекущиеДанные = ДеревоСерверов.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	ОбработатьСтрокуДереваСерверовНаСервере(ТекущиеДанные.ИдентификаторЭлемента, ТекущиеДанные.ГруппировкаСерверов);
	
	ОтключитьОбработчикОжидания("ОбработатьСтрокуДереваСерверов");
	
	ОбщегоНазначенияКлиент.СвернутьРазвернутьДерево(ЭтаФорма, ДеревоРеквизитов.ПолучитьЭлементы(), "ДеревоРеквизитов", Истина);
	
	СтрокаAdvanced = ПолучитьAdvanced();  
	Если Не СтрокаAdvanced = Неопределено Тогда
		Элементы.ДеревоРеквизитов.Свернуть(СтрокаAdvanced.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры          

&НаКлиенте
Функция ПолучитьAdvanced()

	Для каждого СтрокаДерева Из ДеревоРеквизитов.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.Реквизит = "Advanced" Тогда
			Возврат СтрокаДерева;	
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Неопределено;

КонецФункции 

&НаСервере
Процедура ОбработатьСтрокуДереваСерверовНаСервере(ИдентификаторЭлемента, ГруппировкаСерверов)
	
	Если ЗначениеЗаполнено(ИдентификаторЭлемента) Тогда	
		ЗаполнитьТаблицуДаннымиРС(ИдентификаторЭлемента);
	Иначе     
		ЗаполнитьДанныеДляГруппировки(ГруппировкаСерверов);
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьДанныеДляГруппировки(ГруппировкаСерверов)
	
	ДеревоРеквизитов.ПолучитьЭлементы().Очистить(); 
	
	РеквизитыДиска = ПолучитьРеквизитыИзМакета("РеквизитыДиска");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Реквизит КАК Реквизит,
	|	ТЗ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
	|	ТЗ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
	|	ТЗ.ИмяВAPI КАК ИмяВAPI,
	|	ТЗ.Описание КАК Описание,
	|	ТЗ.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ТЗ.Regex КАК Regex,
	|	ТЗ.ТипЗначения КАК ТипЗначения,
	|	ТЗ.Перечисление КАК Перечисление,
	|	ТЗ.Отображать КАК Отображать,
	|	ТЗ.Порядок КАК Порядок
	|ПОМЕСТИТЬ втРеквизиты
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втРеквизиты.Реквизит, ПромежуточноеЗаполнениеКЕ.Реквизит) КАК Реквизит,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.Значение, """") КАК Значение,
	|	ЕСТЬNULL(втРеквизиты.ОбязателенДляЗаполнения, ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения) КАК ОбязателенДляЗаполнения,
	|	ЕСТЬNULL(втРеквизиты.ИдентификаторРеквизита, ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита) КАК ИдентификаторРеквизита,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.РодительРеквизита, """") КАК РодительРеквизита,
	|	ЕСТЬNULL(втРеквизиты.ИмяВAPI, ПромежуточноеЗаполнениеКЕ.ИмяВAPI) КАК ИмяВAPI,
	|	ЕСТЬNULL(втРеквизиты.Описание, ПромежуточноеЗаполнениеКЕ.Описание) КАК Описание,
	|	ЕСТЬNULL(втРеквизиты.ЗначениеПоУмолчанию, ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию,
	|	ЕСТЬNULL(втРеквизиты.Regex, ПромежуточноеЗаполнениеКЕ.Regex) КАК Regex,
	|	ЕСТЬNULL(втРеквизиты.ТипЗначения, ПромежуточноеЗаполнениеКЕ.ТипЗначения) КАК ТипЗначения,
	|	ЕСТЬNULL(втРеквизиты.Перечисление, ПромежуточноеЗаполнениеКЕ.Перечисление) КАК Перечисление,
	|	ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать) КАК Отображать,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов, """") КАК ГруппировкаРеквизитов,
	|	ЕСТЬNULL(втРеквизиты.Порядок, ПромежуточноеЗаполнениеКЕ.Порядок) КАК Порядок
	|ИЗ
	|	втРеквизиты КАК втРеквизиты
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК ПромежуточноеЗаполнениеКЕ
	|		ПО втРеквизиты.ИдентификаторРеквизита = ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита
	|ГДЕ
	|	ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = &ГруппировкаСерверов
	|	И ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
	|	И ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втРеквизиты.ИдентификаторРеквизита, ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита),
	|	ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать),
	|	ЕСТЬNULL(втРеквизиты.Перечисление, ПромежуточноеЗаполнениеКЕ.Перечисление),
	|	ЕСТЬNULL(втРеквизиты.Реквизит, ПромежуточноеЗаполнениеКЕ.Реквизит),
	|	ЕСТЬNULL(втРеквизиты.ЗначениеПоУмолчанию, ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию),
	|	ЕСТЬNULL(втРеквизиты.Regex, ПромежуточноеЗаполнениеКЕ.Regex),
	|	ЕСТЬNULL(втРеквизиты.ТипЗначения, ПромежуточноеЗаполнениеКЕ.ТипЗначения),
	|	ЕСТЬNULL(втРеквизиты.ИмяВAPI, ПромежуточноеЗаполнениеКЕ.ИмяВAPI),
	|	ЕСТЬNULL(втРеквизиты.ОбязателенДляЗаполнения, ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.РодительРеквизита, """"),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.Значение, """"),
	|	ЕСТЬNULL(втРеквизиты.Описание, ПромежуточноеЗаполнениеКЕ.Описание),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов, """"),
	|	ЕСТЬNULL(втРеквизиты.Порядок, ПромежуточноеЗаполнениеКЕ.Порядок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ГруппировкаРеквизитов,
	|	ИдентификаторРеквизита";      
	
	Запрос.УстановитьПараметр("ГруппировкаСерверов", 	ГруппировкаСерверов);
	Запрос.УстановитьПараметр("ТЗ", 					РеквизитыДиска);
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаГруппаРеквизитов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаГруппаРеквизитов.Следующий() Цикл
		СтрокаДерева = ДеревоРеквизитов.ПолучитьЭлементы().Добавить(); 
		СтрокаДерева.Реквизит = ВыборкаГруппаРеквизитов.ГруппировкаРеквизитов;
		
		Выборка = ВыборкаГруппаРеквизитов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока Выборка.Следующий() Цикл
			
			ВыборкаДетальных = Выборка.Выбрать();  
			Пока ВыборкаДетальных.Следующий() Цикл   
				
				Если ЗначениеЗаполнено(ВыборкаДетальных.РодительРеквизита) Тогда
					Продолжить;	
				КонецЕсли;	
				
				СтрокаДереваДетальные = СтрокаДерева.ПолучитьЭлементы().Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаДереваДетальные, ВыборкаДетальных);
				
				СтрокаДереваДетальные.Значение = "";
				
				Если ВыборкаДетальных.Количество() = 1 Тогда	
					СтрокаДереваДетальные.Значение = ВыборкаДетальных.Значение;      				
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	 
	
	ВыборкаГруппаРеквизитов.Сбросить();
	
	Диск = "";
	
	Пока ВыборкаГруппаРеквизитов.Следующий() Цикл
		Выборка = ВыборкаГруппаРеквизитов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока Выборка.Следующий() Цикл
			ВыборкаДетальных = Выборка.Выбрать();  
			
			Пока ВыборкаДетальных.Следующий() Цикл    
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальных.РодительРеквизита) Тогда
					Продолжить;	
				КонецЕсли;	
				
				////Костыль
				//Если СтрНайти(ВыборкаДетальных.Реквизит, "Диск ") <> 0 Тогда
				//	Если Диск = ВыборкаДетальных.Реквизит Тогда
				//		Продолжить;	
				//	КонецЕсли;   
				//	
				//	Диск = ВыборкаДетальных.Реквизит;
				//КонецЕсли;
					
				СтрокаРодитель = НайтиРодителяДереваРеквизитов(ДеревоРеквизитов.ПолучитьЭлементы(), ВыборкаДетальных.РодительРеквизита);
				
				Если СтрокаРодитель = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаДетальных);    
			КонецЦикла;    
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуДаннымиРС(ИдентификаторЭлемента)
	
	ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов КАК ГруппировкаСерверов,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Описание КАК Описание,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Отображать КАК Отображать,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов КАК ГруппировкаРеквизитов,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента = &ИдентификаторЭлемента
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.Отображать
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ ПО
		|	ГруппировкаРеквизитов";
	
	Запрос.УстановитьПараметр("ИдентификаторЭлемента", ИдентификаторЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаГруппаРеквизитов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппаРеквизитов.Следующий() Цикл
		
		СтрокаДерева = ДеревоРеквизитов.ПолучитьЭлементы().Добавить(); 
		СтрокаДерева.Реквизит = ВыборкаГруппаРеквизитов.ГруппировкаРеквизитов;

		Выборка = ВыборкаГруппаРеквизитов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.РодительРеквизита) Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаДереваДетальные = СтрокаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДереваДетальные, Выборка);  
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаГруппаРеквизитов.Сбросить();
	
	Пока ВыборкаГруппаРеквизитов.Следующий() Цикл			
		
		Выборка = ВыборкаГруппаРеквизитов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РодительРеквизита) Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаРодитель = НайтиРодителяДереваРеквизитов(ДеревоРеквизитов.ПолучитьЭлементы(), Выборка.РодительРеквизита);
			
			Если СтрокаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);  
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Функция НайтиРодителяДереваРеквизитов(ЭлементыДерева, ИдентификаторРодителя)	
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ИдентификаторРеквизита = ИдентификаторРодителя Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		НайденнаяСтрокаДерева = НайтиРодителяДереваРеквизитов(СтрокаДерева.ПолучитьЭлементы(), ИдентификаторРодителя);	
		Если НайденнаяСтрокаДерева <> Неопределено Тогда
			Возврат НайденнаяСтрокаДерева;
		КонецЕсли;	
	КонецЦикла;   
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоРеквизитов.НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;     
	
	ТекущееЗначение = Текст;
	
	ТекущиеДанныеДереваСерверов = Элементы.ДеревоСерверов.ТекущиеДанные;     
	
	Если ТекущиеДанныеДереваСерверов = Неопределено Тогда 
		ТекущееИмяЭлемента = "";
	Иначе
		ТекущееИмяЭлемента = ТекущиеДанныеДереваСерверов.ИмяЭлемента;
	КонецЕсли;   
	
	ТекущаяГруппировкаСерверов = ТекущиеДанныеДереваСерверов.ГруппировкаСерверов;
  
	ТекущийИдентификаторЭлемента 	= ТекущиеДанные.ИдентификаторЭлемента; 
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	ТекущийРодительРеквизита		= ТекущиеДанные.РодительРеквизита;

	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина);	
	
КонецПроцедуры  

&НаКлиенте
Процедура ИзменитьЗначениеРеквизита() Экспорт

	ИзменитьЗначениеРеквизитаНаСервере();	
	ОтключитьОбработчикОжидания("ИзменитьЗначениеРеквизита");
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьЗначениеРеквизитаНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда	
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(ТекущийИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(ТекущийИдентификаторРеквизита);
		Набор.Отбор.РодительРеквизита.Установить(ТекущийРодительРеквизита);
		Набор.Прочитать();
		
		Для каждого Запись Из Набор Цикл
			Запись.Значение = ТекущееЗначение;	
		КонецЦикла;           
		
		Набор.Записать(); 
		
		ВнестиИзмененияДляСвязанныхРеквизитов(ТекущийИдентификаторЭлемента, 
			ТекущийИдентификаторРеквизита, 
			ТекущийРодительРеквизита,
			ТекущееЗначение);
	Иначе  
		МассивСерверов = Новый Массив;
		Для каждого СтрокаДерева Из ДеревоСерверов.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.ИмяЭлемента <> ТекущееИмяЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаСервера Из СтрокаДерева.ПолучитьЭлементы() Цикл
				МассивСерверов.Добавить(СтрокаСервера.ИдентификаторЭлемента);
			КонецЦикла;
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = &ГруппировкаСерверов
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = &ИдентификаторРеквизита
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента В(&МассивСерверов)
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита = &РодительРеквизита";
		
		Запрос.УстановитьПараметр("МассивСерверов", 		МассивСерверов);
		Запрос.УстановитьПараметр("ИдентификаторРеквизита", ТекущийИдентификаторРеквизита);
		Запрос.УстановитьПараметр("РодительРеквизита", 		ТекущийРодительРеквизита);
		Запрос.УстановитьПараметр("ГруппировкаСерверов", 	ТекущаяГруппировкаСерверов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЭлемента.Установить(Выборка.ИдентификаторЭлемента);
			Набор.Отбор.ИдентификаторРеквизита.Установить(Выборка.ИдентификаторРеквизита);
			Набор.Отбор.РодительРеквизита.Установить(Выборка.РодительРеквизита);
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				Запись.Значение = ТекущееЗначение;	
			КонецЦикла;           
			
			Набор.Записать();	
			
			ВнестиИзмененияДляСвязанныхРеквизитов(Выборка.ИдентификаторЭлемента, 
				Выборка.ИдентификаторРеквизита, 
				Выборка.РодительРеквизита, 
				ТекущееЗначение);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ВнестиИзмененияДляСвязанныхРеквизитов(ИдентификаторЭлемента, ИдентификаторРеквизита, РодительРеквизита, Значение)
	
	МассивИДРеквизита = Новый Массив;    
	
	Если ИдентификаторРеквизита = "e5945d19-5f54-456d-9659-cbb170b2cb34" Тогда //ansible_user VM	
		МассивИДРеквизита.Добавить("4c982f65-4f4e-465d-b6ec-215067e5992b");//SQL 
		МассивИДРеквизита.Добавить("0fa0a2c4-8e1c-4684-aba9-fa18ffa4a01a");//1С	
	ИначеЕсли ИдентификаторРеквизита = "db7b5704-c0d6-4732-a2fd-5d130f7afcce" Тогда //ansible_ssh_pass VM
		МассивИДРеквизита.Добавить("057d9c58-6e89-49cf-a7b6-602cd147e2bc");//SQL 
		МассивИДРеквизита.Добавить("e71690b8-33f1-4e39-8fab-04c3e465402d");//1С
	ИначеЕсли ИдентификаторРеквизита = "cd277761-3298-4ae3-856f-96737786512c" Тогда //ansible_become_password VM
		МассивИДРеквизита.Добавить("e037f2e4-ac9d-4660-9c38-ae70836d370e");//SQL 
		МассивИДРеквизита.Добавить("67c96fbe-cdf1-4586-a609-cebb256c1aaa");//1С
	КонецЕсли;	
	
	Для каждого Элемент Из МассивИДРеквизита Цикл
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(Элемент);
		Набор.Отбор.РодительРеквизита.Установить(РодительРеквизита);
		Набор.Прочитать();
		
		Для каждого Запись Из Набор Цикл
			Запись.Значение = Значение;	
		КонецЦикла;           
		
		Набор.Записать();  	
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоСерверовРедактируемыйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Редактируемый Тогда //ТекущиеДанные.ИмяЭлемента = "Монитор" 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект);
		ПоказатьВопрос(Оповещение,"Сервер настроен по умолчанию, вы действительно хотите редактировать реквизиты?", РежимДиалогаВопрос.ДаНет);    
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Редактируемый = Ложь;
	КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда  
		Возврат;
	КонецЕсли;     
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Перечисление) И Не ТекущиеДанные.ТипЗначения = "СписокЗначений" Тогда
		ТекущаяСтрока 		= Элементы.ДеревоРеквизитов.ТекущаяСтрока;
		ТекущееПеречисление = ТекущиеДанные.Перечисление;
		ПодключитьОбработчикОжидания("ВключитьСписокВыбораПоПеречислению", 0.1, Истина);			
	Иначе
		Элементы.ДеревоРеквизитовЗначение.РежимВыбораИзСписка = Ложь;
		Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Очистить();
	КонецЕсли;
	
	Элементы.ДеревоРеквизитовЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТекущиеДанные.ТипЗначения); 	

КонецПроцедуры  

&НаКлиенте
Процедура ВключитьСписокВыбораПоПеречислению() Экспорт

	Массив = ПолучитьПеречислениеИзМакета(ТекущееПеречисление);	
	
	Элементы.ДеревоРеквизитовЗначение.РежимВыбораИзСписка = Истина;
    Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Очистить();
	
	Для каждого Элемент Из Массив Цикл
		Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Добавить(Элемент);
	КонецЦикла;
	
	ОтключитьОбработчикОжидания("ВключитьСписокВыбораПоПеречислению");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	ТекущийИдентификаторЭлемента 	= ТекущиеДанные.ИдентификаторЭлемента;
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	
	ТекущееЗначение 				= ВыбранноеЗначение;
	ТекущиеДанныеСерверов 			= Элементы.ДеревоСерверов.ТекущиеДанные;     
	
	Если ТекущиеДанныеСерверов = Неопределено Тогда 
		ТекущееИмяЭлемента 	= "";
	Иначе
		ТекущееИмяЭлемента 	= ТекущиеДанныеСерверов.ИмяЭлемента; 
	КонецЕсли;  
	
	ТекущаяГруппировкаСерверов = ТекущиеДанныеСерверов.ГруппировкаСерверов;
	
	//Количество дисков
	Если ТекущиеДанные.ИдентификаторРеквизита = "cba48746-01d2-447a-aea1-f2de5f9787f2" Тогда
		Если ВыбранноеЗначение = ТекущиеДанные.Значение Тогда	
			Возврат;
		КонецЕсли; 
		
		КоличествоНовое 	= Число(?(_dl_ServiceDiscoveryВызовСервера.ЭтоЧисло(ВыбранноеЗначение), Число(ВыбранноеЗначение), 0));
		КоличествоТекущее 	= Число(?(_dl_ServiceDiscoveryВызовСервера.ЭтоЧисло(ТекущиеДанные.Значение), Число(ТекущиеДанные.Значение), 0));
		
		ТекущийЭлементДерева = ДеревоРеквизитов.НайтиПоИдентификатору(Элементы.ДеревоРеквизитов.ТекущаяСтрока).ПолучитьЭлементы();
		
		Итератор = КоличествоНовое - КоличествоТекущее;
		Если Итератор > 0 Тогда 
			ПараметрыДанных = Новый Структура;       
			ПараметрыДанных.Вставить("КоличествоТекущее", 				КоличествоТекущее);
			ПараметрыДанных.Вставить("КоличествоНовое", 				КоличествоНовое);
			ПараметрыДанных.Вставить("ВыбранныйИдентификаторРеквизита", ТекущиеДанные.ИдентификаторРеквизита);
			ПараметрыДанных.Вставить("ТекущаяСтрока", 					Элементы.ДеревоРеквизитов.ТекущаяСтрока);
			ПараметрыДанных.Вставить("ДобавитьВДерево", 				Истина);
				
			ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных);	
		Иначе 
			Счетчик 		= 0; 
			МассивУдаления 	= Новый Массив;
			Для каждого СтрокаДерева Из ТекущийЭлементДерева Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик > КоличествоНовое Тогда
					МассивУдаления.Добавить(СтрокаДерева);
				КонецЕсли;
			КонецЦикла;	 
			
			Для каждого Элемент Из МассивУдаления Цикл
				ОчиститьРеквизитВРС(Элемент.ИдентификаторРеквизита);	
				
				ТекущийЭлементДерева.Удалить(Элемент);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина);

КонецПроцедуры  

&НаСервере
Процедура ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных)
	
	ОбщиеРеквизитыДиска = ПолучитьРеквизитыИзМакета("РеквизитыДиска");
	
	Если ПараметрыДанных.ДобавитьВДерево Тогда
		ТекущийЭлементДерева = ДеревоРеквизитов.НайтиПоИдентификатору(ПараметрыДанных.ТекущаяСтрока).ПолучитьЭлементы();
	КонецЕсли;
	
	Для А = ПараметрыДанных.КоличествоТекущее+1 По ПараметрыДанных.КоличествоНовое Цикл 
		//Диск      
		ИдентификаторРеквизитаДиска = "Диск "+А;//Новый УникальныйИдентификатор;
		ИмяРеквизитаДиска			= "Диск "+А;
		Если ПараметрыДанных.ДобавитьВДерево Тогда
			СтрокаДерева 						= ТекущийЭлементДерева.Добавить();	
			СтрокаДерева.Реквизит 				= ИмяРеквизитаДиска;  
			СтрокаДерева.ИдентификаторРеквизита = ИдентификаторРеквизитаДиска;
			СтрокаДерева.ИдентификаторЭлемента	= ТекущийИдентификаторЭлемента;
			СтрокаДерева.Отображать 			= Истина;
			//СтрокаДерева.ГруппировкаРеквизитов  = ПараметрыДанных.ГруппировкаСерверов; 
		КонецЕсли;
		
		//ТекущийИдентификаторРеквизита = СтрокаДерева.ИдентификаторРеквизита;

		ПараметрыРеквизита = Новый Структура("ИдентификаторЭлемента, ИдентификаторРеквизита, РодительРеквизита, ИмяЭлемента, Реквизит, ОбязателенДляЗаполнения, ИмяВAPI, Описание, ЗначениеПоУмолчанию, Regex, ТипЗначения, Перечисление, Отображать, ГруппировкаСерверов, ГруппировкаРеквизитов, Порядок");
		ПараметрыРеквизита.Реквизит 				= ИмяРеквизитаДиска; 
		ПараметрыРеквизита.ИдентификаторРеквизита 	= ИдентификаторРеквизитаДиска;
		ПараметрыРеквизита.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
		ПараметрыРеквизита.ИмяЭлемента				= ТекущееИмяЭлемента;
		ПараметрыРеквизита.ОбязателенДляЗаполнения	= Ложь;	
		ПараметрыРеквизита.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;	
		ПараметрыРеквизита.РодительРеквизита		= ПараметрыДанных.ВыбранныйИдентификаторРеквизита;
		ПараметрыРеквизита.Порядок					= А;
		ПараметрыРеквизита.Отображать				= Истина;

		Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда 			
			//ЗаписатьРеквизитВРС(СтрокаДерева.Реквизит, ТекущийИдентификаторЭлемента, ТекущееИмяЭлемента, Ложь, ТекущаяГруппировкаСерверов, ПараметрыДанных.ВыбранныйИдентификаторРеквизита, А, Истина);
			ЗаписатьРеквизитВРС(ПараметрыРеквизита);	
		Иначе      
			ЗаписатьВсеВложенныеРеквизитыВРС(ПараметрыРеквизита);
			//ЗаписатьВсеВложенныеРеквизитыВРС(СтрокаДерева.Реквизит, Ложь, ТекущаяГруппировкаСерверов, ПараметрыДанных.ВыбранныйИдентификаторРеквизита, А, Истина);	
		КонецЕсли;
		
		Для каждого РеквизитДиска Из ОбщиеРеквизитыДиска Цикл   
			Если ПараметрыДанных.ДобавитьВДерево Тогда
				Если РеквизитДиска.Отображать Тогда
					СтрокаДереваРеквизит 						= СтрокаДерева.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДереваРеквизит, РеквизитДиска);
					
					СтрокаДереваРеквизит.ИдентификаторЭлемента	= ТекущийИдентификаторЭлемента;
					СтрокаДереваРеквизит.ОбязателенДляЗаполнения= Истина;
					СтрокаДереваРеквизит.РодительРеквизита		= ИдентификаторРеквизитаДиска; 
				КонецЕсли;
			КонецЕсли;
			
			//ТекущийИдентификаторРеквизита = РеквизитДиска.ИдентификаторРеквизита;
			
			ПараметрыРеквизита = Новый Структура("ИдентификаторЭлемента, ИдентификаторРеквизита, РодительРеквизита, ИмяЭлемента, Реквизит, ОбязателенДляЗаполнения, ИмяВAPI, Описание, ЗначениеПоУмолчанию, Regex, ТипЗначения, Перечисление, Отображать, ГруппировкаСерверов, ГруппировкаРеквизитов, Порядок");
			ЗаполнитьЗначенияСвойств(ПараметрыРеквизита, РеквизитДиска);
			ПараметрыРеквизита.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
			ПараметрыРеквизита.ИдентификаторРеквизита 	= РеквизитДиска.ИдентификаторРеквизита;
			ПараметрыРеквизита.ИмяЭлемента 				= ТекущееИмяЭлемента;
			ПараметрыРеквизита.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
			ПараметрыРеквизита.ГруппировкаСерверов 		= ТекущаяГруппировкаСерверов; 
			ПараметрыРеквизита.РодительРеквизита 		= ИдентификаторРеквизитаДиска;
			
			Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда
				ЗаписатьРеквизитВРС(ПараметрыРеквизита);
				//ЗаписатьРеквизитВРС(РеквизитДиска.Реквизит, ТекущийИдентификаторЭлемента, ТекущееИмяЭлемента, Истина, ТекущаяГруппировкаСерверов, СтрокаДерева.ИдентификаторРеквизита, РеквизитДиска.Порядок, РеквизитДиска.Отображать);
			Иначе           
				ЗаписатьВсеВложенныеРеквизитыВРС(ПараметрыРеквизита);
				//ЗаписатьВсеВложенныеРеквизитыВРС(РеквизитДиска.Реквизит, Истина, ТекущаяГруппировкаСерверов, СтрокаДерева.ИдентификаторРеквизита, РеквизитДиска.Порядок, РеквизитДиска.Отображать);	
			КонецЕсли;  
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьРеквизитВРС(ПараметрыРеквизита)
	//ЗаписатьРеквизитВРС(ИмяРеквизит, ИдентификаторЭлемента, ИмяЭлемента, ОбязателенДляЗаполнения, ГруппировкаСерверов, Родитель, Порядок, Отображать)
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыРеквизита);
	Запись.МестоИспользования		= "КластерСерверов";
	Запись.ГруппировкаРеквизитов	= "VM";
	
	//Запись.ИдентификаторЭлемента 	= ИдентификаторЭлемента; 
	//Запись.ИдентификаторРеквизита 	= ТекущийИдентификаторРеквизита;
	//Запись.ИмяЭлемента 				= ИмяЭлемента;
	//Запись.Реквизит 				= ИмяРеквизит; 	
	//Запись.ОбязателенДляЗаполнения 	= ОбязателенДляЗаполнения;	
	//Запись.ГруппировкаСерверов		= ГруппировкаСерверов; 
	//Запись.РодительРеквизита		= Родитель;
	//Запись.МестоИспользования		= "КластерСерверов";
	//Запись.Отображать				= Отображать; 
	//Запись.Порядок					= Порядок;
	//Запись.ГруппировкаРеквизитов	= "VMWare";
	
	Запись.Записать();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьВсеВложенныеРеквизитыВРС(ПараметрыРеквизита)
	//ЗаписатьВсеВложенныеРеквизитыВРС(ИмяРеквизит, ОбязателенДляЗаполнения, ГруппировкаСерверов, Родитель, Порядок, Отображать)
	
	МассивСерверов = Новый Массив;
	Для каждого СтрокаДерева Из ДеревоСерверов.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ИмяЭлемента <> ТекущееИмяЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаСервера Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПараметрыРеквизита.ИдентификаторЭлемента 	= СтрокаСервера.ИдентификаторЭлемента; 
			ПараметрыРеквизита.ИмяЭлемента 				= СтрокаСервера.ИмяЭлемента;
			
			ЗаписатьРеквизитВРС(ПараметрыРеквизита);
		КонецЦикла;
	КонецЦикла;                  
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитВРС(ИдентификаторРеквизита)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита = &ИдентификаторРеквизита
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
	
	Запрос.УстановитьПараметр("ИдентификаторРеквизита", ИдентификаторРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(ТекущийИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(Выборка.ИдентификаторРеквизита);
		Набор.Отбор.РодительРеквизита.Установить(Выборка.РодительРеквизита);
		
		Набор.Записать();		
		
	КонецЦикла;	
		
КонецПроцедуры 

&НаСервере
Процедура ОчиститьВсеПредзаполненныеДанныеВРС()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(Выборка.ИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(Выборка.ИдентификаторРеквизита);
		Набор.Отбор.РодительРеквизита.Установить(Выборка.РодительРеквизита);
		
		Набор.Записать();		
		
	КонецЦикла;	
		
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоСерверовИмяЭлементаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущееЗначение = Текст;    
	
	ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;  
	
	ТекущийИдентификаторЭлемента = ТекущиеДанные.ИдентификаторЭлемента;
	
	ПодключитьОбработчикОжидания("ИзменитьИмяЭлементаДереваСерверов", 0.1, Истина);		
	
КонецПроцедуры    

&НаКлиенте
Процедура ИзменитьИмяЭлементаДереваСерверов() Экспорт
	
	ИзменитьИмяЭлементаДереваСерверовНаСервере();
	ОтключитьОбработчикОжидания("ИзменитьИмяЭлементаДереваСерверов");

КонецПроцедуры  

&НаСервере
Процедура ИзменитьИмяЭлементаДереваСерверовНаСервере()

	Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторЭлемента.Установить(ТекущийИдентификаторЭлемента); 
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		Запись.ИмяЭлемента = ТекущееЗначение;	
	КонецЦикла;           
	
	Набор.Записать();

КонецПроцедуры 

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;    
	
	Если ТекущиеДанные.ТипЗначения = "СписокЗначений" Тогда
		СтандартнаяОбработка = Ложь;
		
		Элементы.ДеревоРеквизитовЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Значение", ТекущиеДанные.Значение); 
		Если ТекущиеДанные.Перечисление <> "" Тогда
			ПараметрыФормы.Вставить("Перечисление", ТекущиеДанные.Перечисление);		
		КонецЕсли;
		
		ОткрытьФорму("ВнешняяОбработка._dl_КонсольКластераСерверов1С.Форма.РедактированиеСписка", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрогрессаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПрогресса.ТекущиеДанные;
	
	Расшифровка = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = ТекущиеДанные.Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСтатусы(Команда)
	ОбновитьСтатусы();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЧастнымПримером()
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");
	ПримерVM 			= СокрЛП(ОбработкаОбъект.ПолучитьМакет("ПримерVM").ПолучитьТекст());
	ПримерSQL 			= СокрЛП(ОбработкаОбъект.ПолучитьМакет("ПримерSQL").ПолучитьТекст());
	ПримерКластер1С 	= СокрЛП(ОбработкаОбъект.ПолучитьМакет("ПримерКластер1С").ПолучитьТекст());
	
	ДанныеVM 	= _dl_СозданиеИнфраструктуры.JSONВСтруктуру(ПримерVM);
	ДанныеSQL 	= _dl_СозданиеИнфраструктуры.JSONВСтруктуру(ПримерVM);
	Данные1С 	= _dl_СозданиеИнфраструктуры.JSONВСтруктуру(ПримерVM);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""Application servers""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	(_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""Data nodes""
		|			ИЛИ _dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = ""Monitor nodes"")";
	
	Пакет = Запрос.ВыполнитьПакет(); 
	ТЗ_все = Пакет[0].Выгрузить();
	ТЗ_app = Пакет[1].Выгрузить();
	ТЗ_sql = Пакет[2].Выгрузить();
	
	Для каждого Элемент Из ДанныеVM Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			КоличествоНовое = 0;  
			Счетчик = 0;
			Для каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
					Счетчик = Счетчик + 1;
					Если Счетчик = 1 Тогда
						СтрокаСписок = СтрСоединить(Элемент.Значение, ";");	
						
						НайденныеСтроки = ТЗ_все.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
							НайденнаяСтрока.ИдентификаторРеквизита, 
							НайденнаяСтрока.РодительРеквизита, 
							СтрокаСписок);
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					КоличествоНовое = КоличествоНовое + 1;
					МассивИМенЭлементов = Новый Массив;
					МассивИМенЭлементов.Добавить("Application servers");  
					МассивИМенЭлементов.Добавить("Monitor nodes");
					МассивИМенЭлементов.Добавить("Data nodes");
					
					Для каждого ИмяЭлемента Из МассивИМенЭлементов Цикл
						ПараметрыДанных = Новый Структура;       
						ПараметрыДанных.Вставить("КоличествоТекущее", 				КоличествоНовое-1);
						ПараметрыДанных.Вставить("КоличествоНовое", 				КоличествоНовое);
						ПараметрыДанных.Вставить("ВыбранныйИдентификаторРеквизита", "cba48746-01d2-447a-aea1-f2de5f9787f2");
						ПараметрыДанных.Вставить("ТекущаяСтрока", 					0);
						ПараметрыДанных.Вставить("ДобавитьВДерево", 				Ложь);
						
						ТекущаяГруппировкаСерверов 		= ИмяЭлемента;
						ТекущееИмяЭлемента				= ИмяЭлемента; 
						ТекущийИдентификаторЭлемента 	= "";  
						ТекущееЗначение					= "";
						
						ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных);  
					КонецЦикла;	
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.РодительРеквизита КАК РодительРеквизита,
					|	_dl_ПромежуточноеЗаполнениеКЕ1.ИмяВAPI КАК ИмяВAPI
					|ИЗ
					|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ1
					|		ПО _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = _dl_ПромежуточноеЗаполнениеКЕ1.РодительРеквизита
					|ГДЕ
					|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит = &Реквизит";
					
					Запрос.УстановитьПараметр("Реквизит", "Диск "+КоличествоНовое);
					
					ТЗРеквизитовДиска = Запрос.Выполнить().Выгрузить();
					
					Для каждого ЭлементСтруктуры Из ЭлементМассива Цикл
						НайденныеСтроки = ТЗРеквизитовДиска.НайтиСтроки(Новый Структура("ИмяВAPI", ЭлементСтруктуры.Ключ));	
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
							НайденнаяСтрока.ИдентификаторРеквизита, 
							НайденнаяСтрока.РодительРеквизита, 
							ЭлементСтруктуры.Значение);
						КонецЦикла;	
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла; 
		Иначе
			НайденныеСтроки = ТЗ_все.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
				НайденнаяСтрока.ИдентификаторРеквизита, 
				НайденнаяСтрока.РодительРеквизита, 
				Элемент.Значение); 		
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из ДанныеSQL Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Счетчик = 0;
			Для каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
					Счетчик = Счетчик + 1;
					Если Счетчик = 1 Тогда
						СтрокаСписок = СтрСоединить(Элемент.Значение, ";");	
						
						НайденныеСтроки = ТЗ_sql.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
							НайденнаяСтрока.ИдентификаторРеквизита, 
							НайденнаяСтрока.РодительРеквизита, 
							СтрокаСписок);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		Иначе
			НайденныеСтроки = ТЗ_sql.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
				НайденнаяСтрока.ИдентификаторРеквизита, 
				НайденнаяСтрока.РодительРеквизита, 
				Элемент.Значение); 		
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Элемент Из Данные1С Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Счетчик = 0;
			Для каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
					Счетчик = Счетчик + 1;
					Если Счетчик = 1 Тогда
						СтрокаСписок = СтрСоединить(Элемент.Значение, ";");	
						
						НайденныеСтроки = ТЗ_app.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
							НайденнаяСтрока.ИдентификаторРеквизита, 
							НайденнаяСтрока.РодительРеквизита, 
							СтрокаСписок);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		Иначе
			НайденныеСтроки = ТЗ_app.НайтиСтроки(Новый Структура("ИмяВAPI", Элемент.Ключ));	
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаписатьПримерВРС(НайденнаяСтрока.ИдентификаторЭлемента, 
				НайденнаяСтрока.ИдентификаторРеквизита, 
				НайденнаяСтрока.РодительРеквизита, 
				Элемент.Значение); 		
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;   
	
	//Имя ноды
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = ""3abd00a5-bfa9-4cea-bcdf-ef0ccbcd89d5""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписатьПримерВРС(Выборка.ИдентификаторЭлемента, 
				Выборка.ИдентификаторРеквизита, 
				Выборка.РодительРеквизита, 
				Выборка.ИмяЭлемента);
	КонецЦикла; 
			
	//Количество дисков
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = ""cba48746-01d2-447a-aea1-f2de5f9787f2""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписатьПримерВРС(Выборка.ИдентификаторЭлемента, 
				Выборка.ИдентификаторРеквизита, 
				Выборка.РодительРеквизита, 
				2);
	КонецЦикла;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаписатьПримерВРС(ИдентификаторЭлемента, ИдентификаторРеквизита, РодительРеквизита, Значение)

	Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента);
	Набор.Отбор.ИдентификаторРеквизита.Установить(ИдентификаторРеквизита);
	Набор.Отбор.РодительРеквизита.Установить(РодительРеквизита);
	
	Набор.Прочитать();
	
	Для каждого Запись Из НАбор Цикл
		Запись.Значение = Значение;	
	КонецЦикла;       
	
	Набор.Записать();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПримером(Команда)
	
	ЗаполнитьДанныеЧастнымПримером();
	
	ДеревоСерверовПриАктивизацииСтроки(Элементы.ДеревоСерверов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоУмолчанию()
		
	СтруктураПоУмолчанию 	= ПолучитьЗначенияПоУмолчаниюИзМакета("App");
	ДанныеMonitor 			= ПолучитьЗначенияПоУмолчаниюИзМакета("Monitor");
	Если ОперационнаяСистема = "windows" Тогда
		ДанныеDisk1 	= ПолучитьЗначенияПоУмолчаниюИзМакета("WindowsDisk1");
		ДанныеDisk2 	= ПолучитьЗначенияПоУмолчаниюИзМакета("WindowsDisk2");    
	ИначеЕсли ОперационнаяСистема = "linux" Тогда
		ДанныеDisk1 	= ПолучитьЗначенияПоУмолчаниюИзМакета("LinuxDisk1");
		ДанныеDisk2 	= ПолучитьЗначенияПоУмолчаниюИзМакета("LinuxDisk2");
	Иначе
		ДанныеDisk1 = Новый Структура;
		ДанныеDisk2 = Новый Структура;
	КонецЕсли;
		
	//vSphere
	СтруктураПоУмолчанию.Вставить("vcenter_hostname", 	ИмяХостаvSphere);
	СтруктураПоУмолчанию.Вставить("vcenter_username", 	ЛогинПодключенияКvSphere);
	СтруктураПоУмолчанию.Вставить("vcenter_password", 	ПарольПодключенияКvSphere);
	СтруктураПоУмолчанию.Вставить("vcenter_datacenter", ИмяДатацентраVM);
	СтруктураПоУмолчанию.Вставить("vcenter_cluster", 	ИмяКластераVM);
	СтруктураПоУмолчанию.Вставить("vmware_folder", 		ИмяПапкиVM);
	СтруктураПоУмолчанию.Вставить("vm_template", 		ИмяТемплейтаVM);
	
	//endpoint
	СтруктураПоУмолчанию.Вставить("endpoint_1c_token", 	EndpointТокен);
	СтруктураПоУмолчанию.Вставить("endpoint_1c", 		EndpointАдресhttpСервиса);
		
	//Datastore
	СтруктураПоУмолчанию.Вставить("datastore", 		ИмяDatastoreВVMWare);	
	
	//Домен
	СтруктураПоУмолчанию.Вставить("domain", 		Домен);
	
	//ОС
	СтруктураПоУмолчанию.Вставить("os_type", 		ОперационнаяСистема);
	
	//Пароль ps
	СтруктураПоУмолчанию.Вставить("postgres_pass", 	ПользователиСлужебный.СоздатьПароль(ПользователиСлужебный.ПараметрыПароля(20, Истина)));
	
	//ОС
	СтруктураПоУмолчанию.Вставить("os_type", 		ОперационнаяСистема);
	
	//ТекущаяИБ	                                              
	ПараметрыИмен = РеквизитыИменИБВКластере(ТекущаяИБ);
	СтруктураПоУмолчанию.Вставить("ones_base_name", ПараметрыИмен.ИмяИБ1С);
	СтруктураПоУмолчанию.Вставить("db_name", 		ПараметрыИмен.ИмяВСУБД);
	
	Если ДанныеDisk1.Свойство("datastore") Тогда
		ДанныеDisk1.datastore = ИмяDatastoreВVMWare;
	КонецЕсли;  
	
	Если ДанныеDisk2.Свойство("datastore") Тогда
		ДанныеDisk2.datastore = ИмяDatastoreВVMWare;
	КонецЕсли;
	
	Если ТаблицаИменIpИИмен.Количество() = 6 Тогда
		//app1
		СтруктураVM1 = Новый Структура;
		СтруктураVM1.Вставить("hostname_vm", 	ТаблицаИменIpИИмен[0].name);
		СтруктураVM1.Вставить("host_name", 		ТаблицаИменIpИИмен[0].name);
		СтруктураVM1.Вставить("host_ip", 		ТаблицаИменIpИИмен[0].ip);
		
		Массив = Новый Массив;
		Массив.Добавить(ДанныеDisk1);
		Массив.Добавить(ДанныеDisk2); 
		СтруктураVM1.Вставить("Диски", 	Массив);
		
		СтруктураПоУмолчанию.Вставить("VM1",СтруктураVM1); 
		
		//app2
		СтруктураVM2 = Новый Структура;
		СтруктураVM2.Вставить("hostname_vm", 	ТаблицаИменIpИИмен[1].name);
		СтруктураVM2.Вставить("host_name", 		ТаблицаИменIpИИмен[1].name);
		СтруктураVM2.Вставить("host_ip", 		ТаблицаИменIpИИмен[1].ip); 
		//СтруктураVM2.Вставить("Disk1",			ДанныеDisk1);
		//СтруктураVM2.Вставить("Disk2",			ДанныеDisk2); 
		Массив = Новый Массив;
		Массив.Добавить(ДанныеDisk1);
		Массив.Добавить(ДанныеDisk2); 
		СтруктураVM2.Вставить("Диски", 	Массив);
		СтруктураПоУмолчанию.Вставить("VM2",СтруктураVM2); 
		
		//monitor
		СтруктураVM3 = Новый Структура;
		СтруктураVM3.Вставить("hostname_vm", 	ТаблицаИменIpИИмен[2].name);  
		СтруктураVM3.Вставить("host_name", 		ТаблицаИменIpИИмен[2].name);
		СтруктураVM3.Вставить("host_ip", 		ТаблицаИменIpИИмен[2].ip);   
		//СтруктураVM3.Вставить("Disk1",			ДанныеDisk1);
		//СтруктураVM3.Вставить("Disk2",			ДанныеDisk2);  
		Массив = Новый Массив;
		Массив.Добавить(ДанныеDisk1);
		Массив.Добавить(ДанныеDisk2); 
		СтруктураVM3.Вставить("Диски", 	Массив);
		Для каждого Элемент Из ДанныеMonitor Цикл
			СтруктураVM3.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		
		СтруктураПоУмолчанию.Вставить("VM3",СтруктураVM3);
		
		//master
		СтруктураVM4 = Новый Структура;
		СтруктураVM4.Вставить("hostname_vm", 	ТаблицаИменIpИИмен[3].name);  
		СтруктураVM4.Вставить("host_name", 		ТаблицаИменIpИИмен[3].name);
		СтруктураVM4.Вставить("host_ip", 		ТаблицаИменIpИИмен[3].ip); 
		СтруктураVM4.Вставить("node_name", 		ТаблицаИменIpИИмен[3].name+"."+СтруктураПоУмолчанию.domain);
		СтруктураVM4.Вставить("central_server", "true");  
		//СтруктураVM4.Вставить("Disk1",			ДанныеDisk1);
		//СтруктураVM4.Вставить("Disk2",			ДанныеDisk2);  
		Массив = Новый Массив;
		Массив.Добавить(ДанныеDisk1);
		Массив.Добавить(ДанныеDisk2); 
		СтруктураVM4.Вставить("Диски", 	Массив);
		СтруктураПоУмолчанию.Вставить("VM4",СтруктураVM4);
		
		//second
		СтруктураVM5 = Новый Структура;
		СтруктураVM5.Вставить("hostname_vm", 	ТаблицаИменIpИИмен[4].name); 
		СтруктураVM5.Вставить("host_name", 		ТаблицаИменIpИИмен[4].name);
		СтруктураVM5.Вставить("host_ip", 		ТаблицаИменIpИИмен[4].ip);  
		СтруктураVM5.Вставить("node_name", 		ТаблицаИменIpИИмен[4].name+"."+СтруктураПоУмолчанию.domain);
		СтруктураVM5.Вставить("central_server", "false");      
		//СтруктураVM5.Вставить("Disk1",			ДанныеDisk1);
		//СтруктураVM5.Вставить("Disk2",			ДанныеDisk2);   
		Массив = Новый Массив;
		Массив.Добавить(ДанныеDisk1);
		Массив.Добавить(ДанныеDisk2); 
		СтруктураVM5.Вставить("Диски", 			Массив);
		СтруктураПоУмолчанию.Вставить("VM5",СтруктураVM5);
		
		СтруктураПоУмолчанию.Вставить("linux_cluster_name", 	ТаблицаИменIpИИмен[5].name);
		СтруктураПоУмолчанию.Вставить("linux_cluster_ip", 		ТаблицаИменIpИИмен[5].ip); 
		СтруктураПоУмолчанию.Вставить("postgres_cluster_name", 	ТаблицаИменIpИИмен[5].name);
		
		СтруктураПоУмолчанию.Вставить("monitor_node", 	ТаблицаИменIpИИмен[2].name);
		
	КонецЕсли;
	
	////VM
	//host_vmware_vlan //Из диапазона
	
	Возврат СтруктураПоУмолчанию;
	
КонецФункции   

&НаСервере
Функция РеквизитыИменИБВКластере(ИБ)
	
	ПараметрыДанных = Новый Структура("ИмяИБ1С, ИмяВСУБД");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ЗначениеДопРеквизита КАК ИмяВ1С
		|ИЗ
		|	РегистрСведений._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц КАК _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц
		|ГДЕ
		|	_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.КонфигурационнаяЕдиница = &ИБ
		|	И _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ТипДопРеквизита = ЗНАЧЕНИЕ(Справочник._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ИнформационнаяБаза1С_БазаДанныхВКластере)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ЗначениеДопРеквизита КАК ИмяВСУБД
		|ИЗ
		|	РегистрСведений._dl_СвязиОбъектов.СрезПоследних(
		|			,
		|			ОбъектИз = &ИБ
		|				И ТипСвязи = ЗНАЧЕНИЕ(Перечисление._dl_ТипыСвязи.ПрямаяСвязь)
		|				И ОбъектВ.Тип = ЗНАЧЕНИЕ(Справочник._dl_ТипыКонфигурационныхЕдиниц.БазаДанныхСУБД)) КАК _dl_СвязиОбъектовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц КАК _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц
		|		ПО _dl_СвязиОбъектовСрезПоследних.ОбъектВ = _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.КонфигурационнаяЕдиница
		|ГДЕ
		|	_dl_СвязиОбъектовСрезПоследних.Актуальна
		|	И _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ТипДопРеквизита = ЗНАЧЕНИЕ(Справочник._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.БазаДанныхСУБД_БазаДанных)";
	
	Запрос.УстановитьПараметр("ИБ", ИБ);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Выборка1с 	= Пакет[0].Выбрать();
	ВыборкаСУБД = Пакет[1].Выбрать();
	
	Если Выборка1с.Следующий() Тогда	
		ПараметрыДанных.ИмяИБ1С = Выборка1с.ИмяВ1С;	
	КонецЕсли;
	
	Если ВыборкаСУБД.Следующий() Тогда	
		ПараметрыДанных.ИмяВСУБД = ВыборкаСУБД.ИмяВСУБД;	
	КонецЕсли;
	
	Возврат ПараметрыДанных;

КонецФункции 

&НаСервере
Функция ПолучитьНастройкиПодключенияКAPI(ШагСозданияИнфраструктуры)

	ПараметрыСервера 		= Новый Структура("Сервер, Порт, URL");
	ПараметрыСервера.Сервер = СерверВиртуализации; //"192.168.243.2";
	ПараметрыСервера.Порт 	= ПортСервераВиртуализации; //8189;
	
	Если ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.VM") Тогда		 
		ПараметрыСервера.URL = URLСозданияVM; //"/v1/infra/vmware/create/vm";
	ИначеЕсли ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.SQL") Тогда
		ПараметрыСервера.URL = URLСозданияClusterSQL; //"/v1/infra/postgres/create/cluster";	
	ИначеЕсли ШагСозданияИнфраструктуры = ПредопределенноеЗначение("Перечисление._dl_ШагиСозданияИнфраструктуры.Кластер1С") Тогда
		ПараметрыСервера.URL = URLСозданияCluster1С; //"/v1/infra/ones/create/cluster";
	КонецЕсли;

	Возврат ПараметрыСервера;	

КонецФункции 

&НаКлиенте
Процедура КластерВиртуализацииПриИзменении(Элемент)
	ЗаполнитьПараметрыКластераВиртуализации();
КонецПроцедуры    

&НаСервере
Процедура ЗаполнитьПараметрыКластераВиртуализации()

	Если ЗначениеЗаполнено(КластерВиртуализации) Тогда
		СтруктураДанных = _dl_СозданиеИнфраструктуры.ПолучитьПараметрыКластераВиртуализации(КластерВиртуализации);
		
		Для каждого Стр Из СтруктураДанных Цикл
			ЭтаФорма[Стр.Ключ] = Стр.Значение;
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры   

&НаСервере
Процедура ПроверитьЗаполнениеПараметровКластераВиртуализации(Отказ)
	
	Реквизиты = "СерверВиртуализации,
	|ПортСервераВиртуализации,
	|URLСозданияVM,
	|URLСозданияClusterSQL,
	|URLСозданияCluster1С,
	|ИмяХостаvSphere,
	|ЛогинПодключенияКvSphere,
	|ПарольПодключенияКvSphere,
	|ИмяДатацентраVM,
	|ИмяКластераVM,
	|ИмяПапкиVM,
	|ИмяТемплейтаVM,
	|ИмяDatastoreВVMWare,
	|EndpointАдресhttpСервиса,
	|EndpointТокен";
	
	СтруктураПараметров = Новый Структура(Реквизиты);		
	
	Для каждого Стр Из СтруктураПараметров Цикл
		Если Не ЗначениеЗаполнено(ЭтаФорма[Стр.Ключ]) Тогда
			Отказ = Истина;	
		КонецЕсли;	
	КонецЦикла;   
	
	Если Отказ Тогда 
		Элементы.ГруппаРеквизитыКластераВиртуализации.Показать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполнены не все ключевые параметры виртуализации");	
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере
Процедура ЗаполнитьКластерВиртуализацииПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(КластерВиртуализации) Тогда 
		КластерВиртуализации = Константы._dl_КластерВиртуализацииПоУмолчанию.Получить();
		ЗаполнитьПараметрыКластераВиртуализации();	
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДоменКомпанииПоУмолчанию()
	
	Если ЗначениеЗаполнено(ДоменКомпании) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ДоменныеИмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник._dl_ДоменныеИмена КАК _dl_ДоменныеИмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДоменКомпании = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьДомен()

	Домен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоменКомпании, "Наименование");	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьIpиИменаПоУмолчанию()
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда
		ip1_1 = 172;    
		ip1_2 = 25;
		ip1_3 = 170; 
		ip1_4 = 225; 
		Элементы.ip2_1.Видимость = Ложь;
		Элементы.ip2_2.Видимость = Ложь;
		Элементы.ip2_3.Видимость = Ложь;
		Элементы.ip2_4.Видимость = Ложь; 
		
		Элементы.ДекорацияТире1.Видимость = Ложь;
		Элементы.ДекорацияТочка5.Видимость = Ложь;
		Элементы.ДекорацияТочка6.Видимость = Ложь;
		Элементы.ДекорацияТочка7.Видимость = Ложь;
		
		name1 = "ct";
		name2 = "-";
		name3 = "vm";
		name4 = "-";
		name5 = "1capp";
		name6 = 75;
		
		Элементы.ДекорацияТире2.Видимость = Ложь;
		Элементы.name7.Видимость = Ложь;
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда	
		ip1_1 = 172;    
		ip1_2 = 25;
		ip1_3 = 170; 
		ip1_4 = 225;
		
		ip2_1 = 172;
		ip2_2 = 25;
		ip2_3 = 170; 
		ip2_4 = 230;
		
		name1 = "ct";
		name2 = "-";
		name3 = "vm";
		name4 = "-";
		name5 = "1capp";
		name6 = 75; 
		name7 = 80;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПроверитьЗаполнениеДиапазонаIpиИмен(Отказ)
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда 
		НеЗаполнен = ip1_1 = 0 
		И ip1_2 = 0
		И ip1_3 = 0
		И ip1_4 = 0;
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда
		НеЗаполнен = ip1_1 = 0 
		И ip1_2 = 0
		И ip1_3 = 0
		И ip1_4 = 0
		И ip2_1 = 0
		И ip2_2 = 0
		И ip2_3 = 0
		И ip2_4 = 0;
	КонецЕсли;
	
	Если НеЗаполнен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен диапазон ip",,,,Отказ);
	КонецЕсли;
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда 
		НеЗаполнен = name1 = "" 
		И name2 = ""
		И name3 = ""
		И name4 = ""
		И name5 = ""
		И name6 = 0;
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда
		НеЗаполнен = name1 = "" 
		И name2 = ""
		И name3 = ""
		И name4 = ""
		И name5 = ""
		И name6 = 0
		И name7 = 0;
	КонецЕсли;

	Если НеЗаполнен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен диапазон имен",,,,Отказ);
	КонецЕсли;	
		
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьТаблицуIpиИмен()
	
	ТаблицаИменIpИИмен.Очистить();
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда	
		СтрокаТЧ 		= ТаблицаИменIpИИмен.Добавить();
		СтрокаТЧ.name 	= ""+ip1_1+"."+ip1_2+"."+ip1_3+"."+ip1_4;
		СтрокаТЧ.Ip		= ""+name1+name2+name3+name4+name5+name6; 
		СтрокаТЧ.Node   = "local";
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда
		МассивТиповНод = Новый Массив;
		МассивТиповНод.Добавить("App1");
		МассивТиповНод.Добавить("App2");
		МассивТиповНод.Добавить("Monitor");
		МассивТиповНод.Добавить("Master");
		МассивТиповНод.Добавить("Second");
		МассивТиповНод.Добавить("SQL_cluster");
		
		Счетчик = 0;
		Для каждого Элемент Из МассивТиповНод Цикл 
			СтрокаТЧ 		= ТаблицаИменIpИИмен.Добавить();
			СтрокаТЧ.Ip 	= ""+ip1_1+"."+ip1_2+"."+ip1_3+"."+(ip1_4+Счетчик);
			СтрокаТЧ.name	= ""+name1+name2+name3+name4+name5+(name6+Счетчик);
			СтрокаТЧ.Node   = Элемент; 
			
			Если Счетчик = 5 Тогда  //SQL    
				ПараметрыДанных = РеквизитыИменИБВКластере(ТекущаяИБ);
				СтрокаТЧ.name = "digilabs-clone-"+ПараметрыДанных.ИмяИБ1С+"01";	
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;	
	КонецЕсли; 
	
КонецПроцедуры  

&НаСервере
Процедура ПроверитьЗаполнениеIpиИмен(Отказ)

	Для каждого СтрокаТЧ Из ТаблицаИменIpИИмен Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.name)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТЧ.Ip) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не вся таблица имен и ip заполнена",,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры 




