
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ИБ") Тогда  
		Элементы.Страницы.ТекущаяСтраница 	= Элементы.СтраницаМестоРазвертки;
		ТекущаяИБ 							= Параметры.ИБ;   
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_КонфигурационныеЕдиницы.Ссылка КАК ИнформационнаяБаза,
		|	_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ЗначениеДопРеквизита КАК Описание
		|ИЗ
		|	Справочник._dl_КонфигурационныеЕдиницы КАК _dl_КонфигурационныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц КАК _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц
		|		ПО (_dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.КонфигурационнаяЕдиница = _dl_КонфигурационныеЕдиницы.Ссылка
		|				И _dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ТипДопРеквизита = ЗНАЧЕНИЕ(Справочник._dl_ДополнительныеРеквизитыКонфигурационныхЕдиниц.ИнформационнаяБаза1С_Описание))
		|ГДЕ
		|	_dl_КонфигурационныеЕдиницы.Тип = ЗНАЧЕНИЕ(Справочник._dl_ТипыКонфигурационныхЕдиниц.ИнформационнаяБаза1С)
		|	И _dl_КонфигурационныеЕдиницы.КатегорияТипа = ЗНАЧЕНИЕ(Справочник._dl_КатегорииТиповКонфигурационныхЕдиниц.Сервис)
		|	И НЕ _dl_КонфигурационныеЕдиницы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	_dl_КонфигурационныеЕдиницы.Наименование";
		
		ТаблицаИБ.Загрузить(Запрос.Выполнить().Выгрузить());		
	КонецЕсли;    
	
	Элементы.Назад1.Видимость = НЕ Параметры.Свойство("ИБ");
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяИнфраструктура(Команда)

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки;	
	ТекущееМестоРазвертки = "Новая";
	
КонецПроцедуры

&НаКлиенте
Процедура ОблачнаяИнфраструктура(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака;
	ТекущееМестоРазвертки = "Облачная";
	
КонецПроцедуры 

&НаКлиенте
Процедура ВсеНаОдном(Команда)
	
	ТекущееШаблонРазвертки = "ВсеНаОдном";  
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура Кластер(Команда)
	
	ТекущееШаблонРазвертки = "Кластер";   
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаИБ.ТекущиеДанные;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака Тогда 
		Если Не ЗначениеЗаполнено(Облако) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано облако");
			Возврат;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы; 
		ТекущееШаблонРазвертки = "ВсеНаОдном"; 
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы Тогда
		Если Не ЗначениеЗаполнено(ОперационнаяСистема) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана операционная система");
			Возврат;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаполнениеПараметров; 
		ЗаполнитьПараметры();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана информационная база");
			Возврат;
		КонецЕсли;
		
		ТекущаяИБ = ТекущиеДанные.ИнформационнаяБаза; 
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;  
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьПрогресс()
	
	МассивЭлементов = Новый Массив;
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда
		МассивЭлементов.Добавить("Сервер");		
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда   
		МассивЭлементов.Добавить("Сервер приложения №1");
		МассивЭлементов.Добавить("Сервер приложения №2");
		МассивЭлементов.Добавить("Сервер БД №1");
		МассивЭлементов.Добавить("Сервер БД №2");
		МассивЭлементов.Добавить("Сервер БД №3");
	КонецЕсли;         
	
	Для каждого Элемент Из МассивЭлементов Цикл
		СтрокаКЕ 					= ДеревоПрогресса.ПолучитьЭлементы().Добавить(); 
		СтрокаКЕ.Процедура 			= Элемент;   
		СтрокаКЕ.ИндексКартинки 	= ?(ТекущееШаблонРазвертки = "Кластер", 0, 0);
		СтрокаКЕ.СтатусПрогресса	= ?(ТекущееШаблонРазвертки = "Кластер", 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"), 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"));
		//ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.inproccess"));
				
		СтрокаДерева 					= СтрокаКЕ.ПолучитьЭлементы().Добавить(); 
		СтрокаДерева.Процедура 			= ?(ОперационнаяСистема = "Linux", "Linux", "Windows");   
		СтрокаДерева.ИндексКартинки 	= 0; 
		СтрокаДерева.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Создание виртуальной машины"; 
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка дисков виртуальной машины";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;  
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка сети виртуальной машины";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		Если ОперационнаяСистема = "Linux" Тогда
			СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаДереваДетальное.Процедура 		= "Настройка репозиториев";  
			СтрокаДереваДетальное.ИндексКартинки 	= 0;
			СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		КонецЕсли;
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Установка базового софта";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		Если ОперационнаяСистема = "Linux" Тогда
			СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
			СтрокаДереваДетальное.Процедура 		= "Установка и настройка Docker";  
			СтрокаДереваДетальное.ИндексКартинки 	= 0; 
			СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		КонецЕсли;
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка корневого сертификата";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Обновление информации о дисках";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;  
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка дисков виртуальной машины";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка времени на виртуальной машине";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;  
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка SSH на виртуальной машине";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДерева 					= СтрокаКЕ.ПолучитьЭлементы().Добавить(); 
		СтрокаДерева.Процедура 			= ?(ОперационнаяСистема = "Linux", "PostgreSQL", "MS SQL");  
		СтрокаДерева.ИндексКартинки 	= 0;
		СтрокаДерева.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Установка " + ?(ОперационнаяСистема = "Linux", "PostgreSQL", "MS SQL");  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка " + ?(ОперационнаяСистема = "Linux", "PostgreSQL", "MS SQL");  
		СтрокаДереваДетальное.ИндексКартинки 	= 0; 
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДерева 					= СтрокаКЕ.ПолучитьЭлементы().Добавить(); 
		СтрокаДерева.Процедура 			= "Сервер 1С";   
		СтрокаДерева.ИндексКартинки 	= ?(ТекущееШаблонРазвертки = "Кластер", 0, 0);
		СтрокаДерева.СтатусПрогресса	= ?(ТекущееШаблонРазвертки = "Кластер", 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"), 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"));
		//ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.inproccess"));
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Подготовка для установки сервера 1С";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0; 
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Установка сервера 1С";  
		СтрокаДереваДетальное.ИндексКартинки 	= 0;
		СтрокаДереваДетальное.СтатусПрогресса	= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful");
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Восстановление базы в " + ?(ОперационнаяСистема = "Linux", "PostgreSQL", "MS SQL");  
		СтрокаДереваДетальное.ИндексКартинки 	= ?(ТекущееШаблонРазвертки = "Кластер", 0, 0); 
		СтрокаДереваДетальное.СтатусПрогресса	= ?(ТекущееШаблонРазвертки = "Кластер", 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"), 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"));
		//ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.inproccess"));
		
		СтрокаДереваДетальное 					= СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваДетальное.Процедура 		= "Настройка базы в кластере 1С";  
		СтрокаДереваДетальное.ИндексКартинки 	= ?(ТекущееШаблонРазвертки = "Кластер", 0, 0);
		СтрокаДереваДетальное.СтатусПрогресса	= ?(ТекущееШаблонРазвертки = "Кластер", 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"), 
		ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.successful"));
		//ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start"));	
	КонецЦикла;

	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер"; 
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Информационная база (клон)";
		
	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер приложения №1";
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер приложения №2";
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер БД №1";
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер БД №2";
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Сервер БД №3"; 
		
		СтрокаТЧ							= ТаблицаНовыхКЕ.Добавить();
		СтрокаТЧ.КонфигурационнаяЕдиница 	= "Информационная база (клон)";
	КонецЕсли;         	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПрогресс() Экспорт
	
	Счетчик = 1;
	Для каждого СтрокаДерева Из ДеревоПрогресса.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.ИндексКартинки = 0;

		СчетчикДетальные = 1;
		Для каждого ДетальнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл				
			Задержка();
			
			ДетальнаяСтрока.ИндексКартинки = 0;
			
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = СчетчикДетальные 
				И Счетчик <> 1 Тогда
				
				ДетальнаяСтрока.ИндексКартинки = 2;
				
			КонецЕсли;
			
			СчетчикДетальные = СчетчикДетальные + 1;
		КонецЦикла;
		
		Задержка();	
		
		Если ДеревоПрогресса.ПолучитьЭлементы().Количество() = Счетчик Тогда
			
			СтрокаДерева.ИндексКартинки = 2;
			
		КонецЕсли;
				
		Счетчик = Счетчик + 1;
	КонецЦикла;	

КонецПроцедуры   

&НаСервере
Процедура Задержка()
	
	б = 0;
	Для А = 1 По 10000 Цикл
		б = б + 1;		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборИБ;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМестоРазвертки;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОперационнойСистемы Тогда 
		Если ТекущееМестоРазвертки = "Новая" Тогда           
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаШаблонРазвертки;
		ИначеЕсли ТекущееМестоРазвертки = "Облачная" Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборОблака;	
		КонецЕсли;
	КонецЕсли;                                

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры()
	
	РеквизитыVMWare = ПолучитьРеквизитыИзМакета("РеквизитыVMWare"); 
	РеквизитыSQL 	= ПолучитьРеквизитыИзМакета("РеквизитыPostrgeSQL");
	Реквизиты1С 	= ПолучитьРеквизитыИзМакета("РеквизитыКластер1С");
	
	Если ТекущееШаблонРазвертки = "ВсеНаОдном" Тогда
		
		ТекущееИмяЭлемента 				= "Server"; 
		ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
		ТекущаяГруппировкаСерверов 		= ПредопределенноеЗначение("Перечисление._dl_ГруппировкиСерверовСозданияИнфраструктуры.ПустаяСсылка");				
		
		ЗначенияПоУмолчанию = ПолучитьЗначенияПоУмолчаниюИзМакета("appServer");
		
		ЗаписатьЭлементыВДерево(ДеревоСерверов);
				
		ЗаписатьРеквизитыВРС(РеквизитыVMWare, ЗначенияПоУмолчанию, "VMWare");
		ЗаписатьРеквизитыВРС(РеквизитыSQL, ЗначенияПоУмолчанию, "SQL");
		ЗаписатьРеквизитыВРС(Реквизиты1С, ЗначенияПоУмолчанию, "Кластер 1С");

	ИначеЕсли ТекущееШаблонРазвертки = "Кластер" Тогда		
		
		МассивГруппировокЭлементов 	= Новый Массив;
		МассивГруппировокЭлементов.Добавить("Application servers");
		МассивГруппировокЭлементов.Добавить("Monitor nodes");
		МассивГруппировокЭлементов.Добавить("Data nodes");
		
		Для каждого ГруппировкаЭлементов Из МассивГруппировокЭлементов Цикл
			ТекущееИмяЭлемента 			= ГруппировкаЭлементов;
			МассивИменЭлементов 		= Новый Массив;
						
			Если ГруппировкаЭлементов = "Application servers" Тогда
				МассивИменЭлементов.Добавить("App server №1");
				МассивИменЭлементов.Добавить("App server №2"); 
				
				ЗначенияПоУмолчанию = ПолучитьЗначенияПоУмолчаниюИзМакета("appServer");
				
				ТекущаяГруппировкаСерверов	= ПредопределенноеЗначение("Перечисление._dl_ГруппировкиСерверовСозданияИнфраструктуры.ApplicationServers");
			ИначеЕсли ГруппировкаЭлементов = "Monitor nodes" Тогда 
				МассивИменЭлементов.Добавить("Monitor node");
				
				ЗначенияПоУмолчанию = ПолучитьЗначенияПоУмолчаниюИзМакета("monitorNode");

				ТекущаяГруппировкаСерверов	= ПредопределенноеЗначение("Перечисление._dl_ГруппировкиСерверовСозданияИнфраструктуры.MonitorNodes");
			ИначеЕсли ГруппировкаЭлементов = "Data nodes" Тогда
				МассивИменЭлементов.Добавить("Master data node");
				МассивИменЭлементов.Добавить("Secondary data node");
				
				ЗначенияПоУмолчанию = ПолучитьЗначенияПоУмолчаниюИзМакета("dataNode");
				
				ТекущаяГруппировкаСерверов	= ПредопределенноеЗначение("Перечисление._dl_ГруппировкиСерверовСозданияИнфраструктуры.DataNodes");
			КонецЕсли;    
			
			СтрокаДереваГруппировка = ЗаписатьГруппировкуРеквизитовВДерево(ДеревоСерверов);
			
			Для каждого ИмяЭлемента Из МассивИменЭлементов Цикл
				ТекущееИмяЭлемента 				= ИмяЭлемента;
				ТекущийИдентификаторЭлемента 	= Новый УникальныйИдентификатор;  
				
				ЗаписатьЭлементыВДерево(СтрокаДереваГруппировка);
				
				ЗаписатьРеквизитыВРС(РеквизитыVMWare, ЗначенияПоУмолчанию, "VMWare");
				ЗаписатьРеквизитыВРС(РеквизитыSQL, ЗначенияПоУмолчанию, "SQL");
				ЗаписатьРеквизитыВРС(Реквизиты1С, ЗначенияПоУмолчанию, "Кластер 1С");
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры   

&НаСервере
Функция ЗаписатьГруппировкуРеквизитовВДерево(Дерево)
	
	СтрокаРодитель							= Дерево.ПолучитьЭлементы().Добавить();
	СтрокаРодитель.ИмяЭлемента          	= ТекущееИмяЭлемента; 
	СтрокаРодитель.Редактируемый			= Истина;
	СтрокаРодитель.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;	
	
	Возврат СтрокаРодитель;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЭлементыВДерево(Дерево)
	
	СтрокаДерева						= Дерево.ПолучитьЭлементы().Добавить();
	СтрокаДерева.ИмяЭлемента            = ТекущееИмяЭлемента;
	СтрокаДерева.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
	СтрокаДерева.Редактируемый			= Ложь;
	СтрокаДерева.ГруппировкаСерверов	= ТекущаяГруппировкаСерверов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыВРС(ТЗРеквизиты, ЗначенияПоУмолчанию, ГруппировкаРеквизитов = "")
	
	Для каждого СтрокаТЗ Из ТЗРеквизиты Цикл
		Если ЗначенияПоУмолчанию.Свойство(СтрокаТЗ.ИмяВAPI) Тогда
			Значение = ЗначенияПоУмолчанию[СтрокаТЗ.ИмяВAPI];
		Иначе
			Значение = СтрокаТЗ.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТЗ);
		
		Запись.ИмяЭлемента 				= ТекущееИмяЭлемента;
		Запись.ИдентификаторЭлемента 	= ТекущийИдентификаторЭлемента;
		Запись.ГруппировкаСерверов		= ТекущаяГруппировкаСерверов;
		Запись.МестоИспользования		= "КластерСерверов"; 
		Запись.ГруппировкаРеквизитов	= ГруппировкаРеквизитов;
		Запись.Значение					= Значение;
		Запись.Порядок					= СтрокаТЗ.Порядок;
		
		Запись.Записать();	
	КонецЦикла;		

КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("РеквизитыСерверов");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	КвалификаторСтрока1 = Новый КвалификаторыСтроки(150);
	КвалификаторСтрока2 = Новый КвалификаторыСтроки(1000);
	КвалификаторСтрока3 = Новый КвалификаторыСтроки(36);  
	КвалификаторЧисло 	= Новый КвалификаторыЧисла(10,0);

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Реквизит", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1)); 
	ТЗ.Колонки.Добавить("Описание", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока2)); 
	ТЗ.Колонки.Добавить("ИмяВAPI", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("ЗначениеПоУмолчанию", 		Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("Regex", 					Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока1));
	ТЗ.Колонки.Добавить("ИдентификаторРеквизита", 	Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3)); 
	ТЗ.Колонки.Добавить("Отображать", 				Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ОбязателенДляЗаполнения", 	Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ТипЗначения", 				Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3));
	ТЗ.Колонки.Добавить("Перечисление", 			Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока3));
	ТЗ.Колонки.Добавить("Порядок", 					Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		СтрокаТЗ 							= ТЗ.Добавить();
		СтрокаТЗ.Реквизит 					= Область.Область(ИндСтроки, 1, ИндСтроки, 1).Текст;
		СтрокаТЗ.Описание 					= Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст;
		СтрокаТЗ.ИмяВAPI 					= Область.Область(ИндСтроки, 3, ИндСтроки, 3).Текст;
		СтрокаТЗ.ЗначениеПоУмолчанию 		= Область.Область(ИндСтроки, 4, ИндСтроки, 4).Текст;
		СтрокаТЗ.Regex 						= Область.Область(ИндСтроки, 5, ИндСтроки, 5).Текст;
		СтрокаТЗ.ИдентификаторРеквизита 	= Область.Область(ИндСтроки, 6, ИндСтроки, 6).Текст;
		СтрокаТЗ.Отображать                 = Область.Область(ИндСтроки, 7, ИндСтроки, 7).Текст;
		СтрокаТЗ.ОбязателенДляЗаполнения 	= Область.Область(ИндСтроки, 8, ИндСтроки, 8).Текст;
		СтрокаТЗ.ТипЗначения 				= Область.Область(ИндСтроки, 9, ИндСтроки, 9).Текст; 
		СтрокаТЗ.Перечисление 				= Область.Область(ИндСтроки, 10, ИндСтроки, 10).Текст; 
		СтрокаТЗ.Порядок 					= Область.Область(ИндСтроки, 11, ИндСтроки, 11).Текст;
	КонецЦикла;
	 
	Возврат ТЗ; 
	
КонецФункции

&НаСервере
Функция ПолучитьПеречислениеИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("ПеречисленияЗначений");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	МассивПеречисления = Новый Массив;
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		МассивПеречисления.Добавить(Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст);
	КонецЦикла;
	 
	Возврат МассивПеречисления; 
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияПоУмолчаниюИзМакета(ИмяОбласти) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет 			= ОбработкаОбъект.ПолучитьМакет("ЗначенияПоУмолчаниюПоНодам");
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Структура = Новый Структура;
	
	Для ИндСтроки = 1 По Область.ВысотаТаблицы Цикл          
		Структура.Вставить(Область.Область(ИндСтроки, 2, ИндСтроки, 2).Текст, Область.Область(ИндСтроки, 3, ИндСтроки, 3).Текст);
	КонецЦикла;
	 
	Возврат Структура; 
	
КонецФункции

&НаКлиенте
Процедура Готово(Команда)  
	
	ГотовоНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ГотовоНаСервере()
	
	Отказ = Ложь;
	ПроизвестиПроверкиПередСозданиемИнфраструктуры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПрогресса;	

	СоздатьИнфраструктуру();

КонецПроцедуры   

&НаСервере
Процедура СоздатьИнфраструктуру()
	
	СпрИнфраструктура 				= Справочники._dl_ЗаданиеНаСозданиеИнфраструктуры.СоздатьЭлемент();
	СпрИнфраструктура.Наименование 	= "Контур под базу "+ТекущаяИБ;
	
	ТЧОбъекты = СпрИнфраструктура.ОбъектыИнфраструктуры; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|
		|СГРУППИРОВАТЬ ПО
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяЭлемента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов КАК ГруппировкаСерверов,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования КАК МестоИспользования,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Описание КАК Описание,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Отображать КАК Отображать
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаОбъекты 	= Пакет[0].Выбрать(); 
	ТЗВсеДанные		= Пакет[1].Выгрузить();
	
	Пока ВыборкаОбъекты.Следующий() Цикл
		
		//Объект
		СтрокаТЧОбъекты 						= ТЧОбъекты.Добавить();
		СтрокаТЧОбъекты.ИмяОбъекта 				= ВыборкаОбъекты.ИмяЭлемента;
		СтрокаТЧОбъекты.ИдентификаторОбъекта 	= ВыборкаОбъекты.ИдентификаторЭлемента; 
		СтрокаТЧОбъекты.Статус 					= ПредопределенноеЗначение("Перечисление._dl_СтатусСозданияИнфраструктуры.start"); 
					
		//Кубики
		Диски 			= Новый Массив;
		ДанныеРеквизитаКоличествоДисков	= ТЗВсеДанные.НайтиСтроки(Новый Структура("ИдентификаторЭлемента, ИдентификаторРеквизита", ВыборкаОбъекты.ИдентификаторЭлемента, "cba48746-01d2-447a-aea1-f2de5f9787f2"));
		
		Для каждого ДанныеКоличестваДисков Из ДанныеРеквизитаКоличествоДисков Цикл
			
			ВсеДиски = ТЗВсеДанные.НайтиСтроки(Новый Структура("ИдентификаторЭлемента, РодительРеквизита", ВыборкаОбъекты.ИдентификаторЭлемента, ДанныеКоличестваДисков.ИдентификаторРеквизита));
			
			Для каждого ДанныеПоДиску Из ВсеДиски Цикл
				РеквизитыДиска = ТЗВсеДанные.НайтиСтроки(Новый Структура("ИдентификаторЭлемента, РодительРеквизита", ВыборкаОбъекты.ИдентификаторЭлемента, ДанныеПоДиску.ИдентификаторРеквизита));
				
				СтруктураДиск 		= Новый Структура(); 
				СтруктураДиск.Вставить("name", ДанныеПоДиску.Реквизит);
				
				Для каждого РеквизитДиска Из РеквизитыДиска Цикл
					СтруктураДиск.Вставить(РеквизитДиска.ИмяВAPI,	РеквизитДиска.Значение); 
				КонецЦикла;	
			КонецЦикла;
			
			

			//Кубики
			//СозданиеVMWare(ВыборкаДетальные);
			//СозданиеSQL(ВыборкаДетальные);
			//СозданиеКластера1С(ВыборкаДетальные);
			
		КонецЦикла;
			
		//СтрокаТЧОбъекты.КонфигОбъекта = КонфигОбъекта;
		
	КонецЦикла;
		
КонецПроцедуры   

&НаСервере
Процедура СозданиеVMWare(Выборка)
	
	
	
	
	//Создание VMWare  
	Диски = Новый Массив;
	
	
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("delete_vm_if_exist", false);
    Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	Соответствие.Вставить("add_to_AD", false);
	
//{
//"delete_vm_if_exist": false,
//"add_to_AD": false,
//"disks": [
//{
//"label": "string",
//"name": "string",
//"size": 100,
//"datastore": "string",
//"type": "thin",
//"unit_number": 127,
//"mount_folder": "string"
//}
//],
//"host_cpu": 1,
//"num_cpu_cores_per_socket": 1,
//"host_memory": 100,
//"hostname_vm": "string",
//"host_ip": "192.168.0.1",
//"host_netmask": "string",
//"host_gateway": "192.168.0.1",
//"host_vmware_vlan": "string",
//"domain_admin_login": "string",
//"domain_admin_pass": "string",
//"vcenter_hostname": "string",
//"vcenter_username": "string",
//"vcenter_password": "string",
//"vcenter_datacenter": "string",
//"vcenter_cluster": "string",
//"vmware_folder": "string",
//"vm_template": "string",
//"os_type": "linux",
//"locale": "ru_RU.UTF-8",
//"time_zone": "Etc/GMT+12",
//"ansible_user": "string",
//"ansible_ssh_pass": "string",
//"ansible_become_password": "string",
//"domain": "string",
//"dns_servers": [
//"192.168.0.1"
//],
//"ad_dns_servers": [
//"192.168.0.1"
//],
//"ntp_servers": [
//"192.168.0.1"
//],
//"docker_data_folder": "string",
//"docker_global_network": "string",
//"linux_comp_ou": "string"
//}	
	Json = _dl_СозданиеИнфраструктуры.СтруктуруВJSON(Соответствие);

КонецПроцедуры

&НаСервере
Процедура СозданиеSQL()

		//SQL 
	
//	{
//  "node_server_connect_settings": {
//    "monitor_node": {
//      "ansible_user": "string",
//      "ansible_ssh_pass": "string",
//      "ansible_become_password": "string",
//      "host_ip": "192.168.0.1",
//      "host_name": "string"
//    },
//    "master_node": {
//      "ansible_user": "string",
//      "ansible_ssh_pass": "string",
//      "ansible_become_password": "string",
//      "host_ip": "192.168.0.1",
//      "host_name": "string"
//    },
//    "second_node": [
//      {
//        "ansible_user": "string",
//        "ansible_ssh_pass": "string",
//        "ansible_become_password": "string",
//        "host_ip": "192.168.0.1",
//        "host_name": "string"
//      }
//    ]
//  },
//  "pg_cluster_settings": {
//    "postgres_server_version": "12",
//    "postgres_server_work_dir": "/data/postgresql",
//    "postgres_port": 5432,
//    "postgres_pass": "string",
//    "listen_addresses": "*",
//    "max_connections": 1000,
//    "linux_cluster_name": "string",
//    "linux_cluster_ip": "192.168.0.1",
//    "monitor_node": "string",
//    "monitor_port": 5432,
//    "db_dump_path": "string",
//    "domain": "string",
//    "time_zone": "Etc/GMT+12"
//  }
//}
//	

КонецПроцедуры 

&НаСервере
Процедура СозданиеКластера1С()

	//Кластер 1С
//	{
//"service_name": "string",
//"ones_version": "8.3.22.1672",
//"ones_base_name": "string",
//"db_name": "string",
//"linux_cluster_name": "string",
//"postgres_pass": "string",
//"ones_binary_url": "http://example.com",
//"ones_nodes": [
//{}
//],
//"components": "additional_admin_functions",
//"language": "ar"
//}

КонецПроцедуры   

&НаСервере
Функция СоздатьПоручениеНаСервере(Json)

	Спр 								= Справочники._dl_ПорученияПоСозданиюИнфраструктуры.СоздатьЭлемент();	
	//Спр.Наименование 					= "Создание инфраструктуры от " + Строка(ТекущаяДатаСеанса());
	//Спр.КонфигJSON 						= КонфигJSON;
	//Спр.ВерсияПротокола 				= ВерсияПротокола;
	//Спр.БазаОтправитель 				= БазаОтправитель;
	//Спр.ШаблонСозданияИнфраструктуры 	= ШаблонСозданияИнфраструктуры;
	//Спр.СредаВиртуализацииКластер 		= СредаВиртуализацииКластер;
	//Спр.СредаВиртуализацииЛогин 		= СредаВиртуализацииЛогин;
	//Спр.СредаВиртуализацииПароль 		= СредаВиртуализацииПароль;
	
	//Для Каждого Стр Из ОбъектыДляСоздания Цикл 
	//	НовСтр = Спр.ОбъектыДляСоздания.Добавить();
	//	ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	//КонецЦикла;
	Спр.Записать();
	
	Возврат Спр.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПроизвестиПроверкиПередСозданиемИнфраструктуры(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяЭлемента КАК ИмяЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения
		|	И _dl_ПромежуточноеЗаполнениеКЕ.Значение = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле """+Выборка.Реквизит+""" элемента "+Выборка.ИмяЭлемента+" не заполнено",,,,Отказ);			
	КонецЦикла;	

КонецПроцедуры 

&НаКлиенте
Процедура ДеревоСерверовПриАктивизацииСтроки(Элемент)
		
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ПодключитьОбработчикОжидания("ОбработатьСтрокуДереваСерверов", 0.1, Истина);

КонецПроцедуры  

&НаКлиенте
Процедура ОбработатьСтрокуДереваСерверов() Экспорт
	
	ТекущиеДанные = ДеревоСерверов.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	ОбработатьСтрокуДереваСерверовНаСервере(ТекущиеДанные.ИдентификаторЭлемента, ТекущиеДанные.ГруппировкаСерверов);
	
	ОтключитьОбработчикОжидания("ОбработатьСтрокуДереваСерверов");
		
КонецПроцедуры    

&НаСервере
Процедура ОбработатьСтрокуДереваСерверовНаСервере(ИдентификаторЭлемента, ГруппировкаСерверов)
	
	Если ЗначениеЗаполнено(ИдентификаторЭлемента) Тогда	
		ЗаполнитьТаблицуДаннымиРС(ИдентификаторЭлемента);
	Иначе     
		ЗаполнитьДанныеДляГруппировки(ГруппировкаСерверов);
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьДанныеДляГруппировки(ГруппировкаСерверов)
	
	ДеревоРеквизитов.ПолучитьЭлементы().Очистить(); 
	
	РеквизитыДиска = ПолучитьРеквизитыИзМакета("РеквизитыДиска");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Реквизит КАК Реквизит,
	|	ТЗ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
	|	ТЗ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
	|	ТЗ.ИмяВAPI КАК ИмяВAPI,
	|	ТЗ.Описание КАК Описание,
	|	ТЗ.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ТЗ.Regex КАК Regex,
	|	ТЗ.ТипЗначения КАК ТипЗначения,
	|	ТЗ.Перечисление КАК Перечисление,
	|	ТЗ.Отображать КАК Отображать,
	|	ТЗ.Порядок КАК Порядок
	|ПОМЕСТИТЬ втРеквизиты
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втРеквизиты.Реквизит, ПромежуточноеЗаполнениеКЕ.Реквизит) КАК Реквизит,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.Значение, """") КАК Значение,
	|	ЕСТЬNULL(втРеквизиты.ОбязателенДляЗаполнения, ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения) КАК ОбязателенДляЗаполнения,
	|	ЕСТЬNULL(втРеквизиты.ИдентификаторРеквизита, ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита) КАК ИдентификаторРеквизита,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.РодительРеквизита, """") КАК РодительРеквизита,
	|	ЕСТЬNULL(втРеквизиты.ИмяВAPI, ПромежуточноеЗаполнениеКЕ.ИмяВAPI) КАК ИмяВAPI,
	|	ЕСТЬNULL(втРеквизиты.Описание, ПромежуточноеЗаполнениеКЕ.Описание) КАК Описание,
	|	ЕСТЬNULL(втРеквизиты.ЗначениеПоУмолчанию, ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию) КАК ЗначениеПоУмолчанию,
	|	ЕСТЬNULL(втРеквизиты.Regex, ПромежуточноеЗаполнениеКЕ.Regex) КАК Regex,
	|	ЕСТЬNULL(втРеквизиты.ТипЗначения, ПромежуточноеЗаполнениеКЕ.ТипЗначения) КАК ТипЗначения,
	|	ЕСТЬNULL(втРеквизиты.Перечисление, ПромежуточноеЗаполнениеКЕ.Перечисление) КАК Перечисление,
	|	ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать) КАК Отображать,
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов, """") КАК ГруппировкаРеквизитов,
	|	ЕСТЬNULL(втРеквизиты.Порядок, ПромежуточноеЗаполнениеКЕ.Порядок) КАК Порядок
	|ИЗ
	|	втРеквизиты КАК втРеквизиты
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК ПромежуточноеЗаполнениеКЕ
	|		ПО втРеквизиты.ИдентификаторРеквизита = ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита
	|ГДЕ
	|	ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = &ГруппировкаСерверов
	|	И ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
	|	И ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втРеквизиты.ИдентификаторРеквизита, ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита),
	|	ЕСТЬNULL(втРеквизиты.Отображать, ПромежуточноеЗаполнениеКЕ.Отображать),
	|	ЕСТЬNULL(втРеквизиты.Перечисление, ПромежуточноеЗаполнениеКЕ.Перечисление),
	|	ЕСТЬNULL(втРеквизиты.Реквизит, ПромежуточноеЗаполнениеКЕ.Реквизит),
	|	ЕСТЬNULL(втРеквизиты.ЗначениеПоУмолчанию, ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию),
	|	ЕСТЬNULL(втРеквизиты.Regex, ПромежуточноеЗаполнениеКЕ.Regex),
	|	ЕСТЬNULL(втРеквизиты.ТипЗначения, ПромежуточноеЗаполнениеКЕ.ТипЗначения),
	|	ЕСТЬNULL(втРеквизиты.ИмяВAPI, ПромежуточноеЗаполнениеКЕ.ИмяВAPI),
	|	ЕСТЬNULL(втРеквизиты.ОбязателенДляЗаполнения, ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.РодительРеквизита, """"),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.Значение, """"),
	|	ЕСТЬNULL(втРеквизиты.Описание, ПромежуточноеЗаполнениеКЕ.Описание),
	|	ЕСТЬNULL(ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов, """"),
	|	ЕСТЬNULL(втРеквизиты.Порядок, ПромежуточноеЗаполнениеКЕ.Порядок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ГруппировкаРеквизитов,
	|	ИдентификаторРеквизита";      
	
	Запрос.УстановитьПараметр("ГруппировкаСерверов", 	ГруппировкаСерверов);
	Запрос.УстановитьПараметр("ТЗ", 					РеквизитыДиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаГруппировкаРеквизитов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппировкаРеквизитов.Следующий() Цикл
		СтрокаДерева 			= ДеревоРеквизитов.ПолучитьЭлементы().Добавить();
		СтрокаДерева.Реквизит 	= ВыборкаГруппировкаРеквизитов.ГруппировкаРеквизитов;  
		СтрокаДерева.Отображать = Истина;
		
		Выборка = ВыборкаГруппировкаРеквизитов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока Выборка.Следующий() Цикл
			
			ВыборкаДетальных = Выборка.Выбрать();  
			Пока ВыборкаДетальных.Следующий() Цикл   
				
				Если ЗначениеЗаполнено(ВыборкаДетальных.РодительРеквизита) Тогда
					Продолжить;	
				КонецЕсли;	
				
				СтрокаДереваДетальные = СтрокаДерева.ПолучитьЭлементы().Добавить(); 
				ЗаполнитьЗначенияСвойств(СтрокаДереваДетальные, ВыборкаДетальных);
				
				СтрокаДереваДетальные.Значение = "";
				
				Если ВыборкаДетальных.Количество() = 1 Тогда	
					СтрокаДереваДетальные.Значение = ВыборкаДетальных.Значение;      				
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	 
	КонецЦикла;
	
	ВыборкаГруппировкаРеквизитов.Сбросить();
	
	Пока ВыборкаГруппировкаРеквизитов.Следующий() Цикл
		Выборка = ВыборкаГруппировкаРеквизитов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл		
			ВыборкаДетальных = Выборка.Выбрать();  
			
			Пока ВыборкаДетальных.Следующий() Цикл    
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальных.РодительРеквизита) Тогда
					Продолжить;	
				КонецЕсли;	
				
				СтрокаРодитель = НайтиРодителяДереваРеквизитов(ДеревоРеквизитов.ПолучитьЭлементы(), ВыборкаДетальных.РодительРеквизита);
				
				Если СтрокаРодитель = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаДетальных);    
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуДаннымиРС(ИдентификаторЭлемента)
	
	ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.Реквизит КАК Реквизит,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Значение КАК Значение,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов КАК ГруппировкаСерверов,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИмяВAPI КАК ИмяВAPI,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Описание КАК Описание,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Regex КАК Regex,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ТипЗначения КАК ТипЗначения,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Перечисление КАК Перечисление,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Отображать КАК Отображать,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаРеквизитов КАК ГруппировкаРеквизитов,
		|	_dl_ПромежуточноеЗаполнениеКЕ.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента = &ИдентификаторЭлемента
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.Отображать
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ ПО
		|	ГруппировкаРеквизитов";
	
	Запрос.УстановитьПараметр("ИдентификаторЭлемента", ИдентификаторЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировкаРеквизитов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппировкаРеквизитов.Следующий() Цикл	
		СтрокаДерева 			= ДеревоРеквизитов.ПолучитьЭлементы().Добавить();
		СтрокаДерева.Реквизит 	= ВыборкаГруппировкаРеквизитов.ГруппировкаРеквизитов; 
		СтрокаДерева.Отображать = Истина;
		
		Выборка = ВыборкаГруппировкаРеквизитов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.РодительРеквизита) Тогда
				Продолжить;	
			КонецЕсли;
		
			СтрокаДереваДетальные = СтрокаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДереваДетальные, Выборка);
		КонецЦикла;
	КонецЦикла;          
	
	ВыборкаГруппировкаРеквизитов.Сбросить();
	
	Пока ВыборкаГруппировкаРеквизитов.Следующий() Цикл			
		Выборка = ВыборкаГруппировкаРеквизитов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РодительРеквизита) Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаРодитель = НайтиРодителяДереваРеквизитов(ДеревоРеквизитов.ПолучитьЭлементы(), Выборка.РодительРеквизита);
			
			Если СтрокаРодитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Функция НайтиРодителяДереваРеквизитов(ЭлементыДерева, ИдентификаторРодителя)	
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ИдентификаторРеквизита = ИдентификаторРодителя Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		НайденнаяСтрокаДерева = НайтиРодителяДереваРеквизитов(СтрокаДерева.ПолучитьЭлементы(), ИдентификаторРодителя);	
		Если НайденнаяСтрокаДерева <> Неопределено Тогда
			Возврат НайденнаяСтрокаДерева;
		КонецЕсли;	
	КонецЦикла;   
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоРеквизитов.НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;     
	
	ТекущееЗначение = Текст;
	
	ТекущиеДанныеДереваСерверов = Элементы.ДеревоСерверов.ТекущиеДанные;     
	
	Если ТекущиеДанныеДереваСерверов = Неопределено Тогда 
		ТекущееИмяЭлемента 			= "";
	Иначе
		ТекущееИмяЭлемента = ТекущиеДанныеДереваСерверов.ИмяЭлемента;
	КонецЕсли;   
	
	ТекущаяГруппировкаСерверов = ТекущиеДанныеДереваСерверов.ГруппировкаСерверов;
  
	ТекущийИдентификаторЭлемента 	= ТекущиеДанные.ИдентификаторЭлемента; 
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	ТекущийРодительРеквизита		= ТекущиеДанные.РодительРеквизита;

	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина);	
	
КонецПроцедуры  

&НаКлиенте
Процедура ИзменитьЗначениеРеквизита() Экспорт

	ИзменитьЗначениеРеквизитаНаСервере();	
	ОтключитьОбработчикОжидания("ИзменитьЗначениеРеквизита");
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьЗначениеРеквизитаНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда	
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(ТекущийИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(ТекущийИдентификаторРеквизита);
		Набор.Отбор.РодительРеквизита.Установить(ТекущийРодительРеквизита);
		Набор.Прочитать();
		
		Для каждого Запись Из Набор Цикл
			Запись.Значение = ТекущееЗначение;	
		КонецЦикла;           
		
		Набор.Записать();  
	Иначе  
		МассивСерверов = Новый Массив;
		Для каждого СтрокаДерева Из ДеревоСерверов.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.ИмяЭлемента <> ТекущееИмяЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаСервера Из СтрокаДерева.ПолучитьЭлементы() Цикл
				МассивСерверов.Добавить(СтрокаСервера.ИдентификаторЭлемента);
			КонецЦикла;
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ГруппировкаСерверов = &ГруппировкаСерверов
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита = &ИдентификаторРеквизита
		|	И _dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента В(&МассивСерверов)
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""
		|	И _dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита = &РодительРеквизита";
		
		Запрос.УстановитьПараметр("МассивСерверов", 		МассивСерверов);
		Запрос.УстановитьПараметр("ИдентификаторРеквизита", ТекущийИдентификаторРеквизита);
		Запрос.УстановитьПараметр("РодительРеквизита", 		ТекущийРодительРеквизита);
		Запрос.УстановитьПараметр("ГруппировкаСерверов", 	ТекущаяГруппировкаСерверов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЭлемента.Установить(Выборка.ИдентификаторЭлемента);
			Набор.Отбор.ИдентификаторРеквизита.Установить(Выборка.ИдентификаторРеквизита);
			Набор.Отбор.РодительРеквизита.Установить(Выборка.РодительРеквизита);
			Набор.Прочитать();
			
			Для каждого Запись Из Набор Цикл
				Запись.Значение = ТекущееЗначение;	
			КонецЦикла;           
			
			Набор.Записать();	
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры		   

&НаКлиенте
Процедура ДеревоСерверовРедактируемыйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Редактируемый Тогда //ТекущиеДанные.ИмяЭлемента = "Монитор" 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект);
		ПоказатьВопрос(Оповещение,"Сервер настроен по умолчанию, вы действительно хотите редактировать реквизиты?", РежимДиалогаВопрос.ДаНет);    
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Редактируемый = Ложь;
	КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда  
		Возврат;
	КонецЕсли;     
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Перечисление) Тогда
		ТекущаяСтрока 		= Элементы.ДеревоРеквизитов.ТекущаяСтрока;
		ТекущееПеречисление = ТекущиеДанные.Перечисление;
		ПодключитьОбработчикОжидания("ВключитьСписокВыбораПоПеречислению", 0.1, Истина);			
	Иначе
		Элементы.ДеревоРеквизитовЗначение.РежимВыбораИзСписка = Ложь;
		Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Очистить();
	КонецЕсли;
	
	Элементы.ДеревоРеквизитовЗначение.ОграничениеТипа = Новый ОписаниеТипов(ТекущиеДанные.ТипЗначения); 

КонецПроцедуры  

&НаКлиенте
Процедура ВключитьСписокВыбораПоПеречислению() Экспорт

	Массив = ПолучитьПеречислениеИзМакета(ТекущееПеречисление);	
	
	Элементы.ДеревоРеквизитовЗначение.РежимВыбораИзСписка = Истина;
    Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Очистить();
	
	Для каждого Элемент Из Массив Цикл
		Элементы.ДеревоРеквизитовЗначение.СписокВыбора.Добавить(Элемент);
	КонецЦикла;
	
	ОтключитьОбработчикОжидания("ВключитьСписокВыбораПоПеречислению");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	ТекущийИдентификаторЭлемента 	= ТекущиеДанные.ИдентификаторЭлемента;
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	
	ТекущееЗначение 				= ВыбранноеЗначение;
	ТекущиеДанныеСерверов 			= Элементы.ДеревоСерверов.ТекущиеДанные;     
	
	Если ТекущиеДанныеСерверов = Неопределено Тогда 
		ТекущееИмяЭлемента 	= "";
	Иначе
		ТекущееИмяЭлемента 	= ТекущиеДанныеСерверов.ИмяЭлемента; 
	КонецЕсли;  
	
	ТекущаяГруппировкаСерверов = ТекущиеДанныеСерверов.ГруппировкаСерверов;
	
	//Количество дисков
	Если ТекущиеДанные.ИдентификаторРеквизита = "cba48746-01d2-447a-aea1-f2de5f9787f2" Тогда
		Если ВыбранноеЗначение = ТекущиеДанные.Значение Тогда	
			Возврат;
		КонецЕсли; 
		
		КоличествоНовое 	= Число(?(_dl_ServiceDiscoveryВызовСервера.ЭтоЧисло(ВыбранноеЗначение), Число(ВыбранноеЗначение), 0));
		КоличествоТекущее 	= Число(?(_dl_ServiceDiscoveryВызовСервера.ЭтоЧисло(ТекущиеДанные.Значение), Число(ТекущиеДанные.Значение), 0));
		
		ТекущийЭлементДерева = ДеревоРеквизитов.НайтиПоИдентификатору(Элементы.ДеревоРеквизитов.ТекущаяСтрока).ПолучитьЭлементы();
		
		Итератор = КоличествоНовое - КоличествоТекущее;
		Если Итератор > 0 Тогда 
			ПараметрыДанных = Новый Структура;       
			ПараметрыДанных.Вставить("КоличествоТекущее", 				КоличествоТекущее);
			ПараметрыДанных.Вставить("КоличествоНовое", 				КоличествоНовое);
			ПараметрыДанных.Вставить("ВыбранныйИдентификаторРеквизита", ТекущиеДанные.ИдентификаторРеквизита);
			
			ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных);	
		Иначе 
			Счетчик 		= 0; 
			МассивУдаления 	= Новый Массив;
			Для каждого СтрокаДерева Из ТекущийЭлементДерева Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик > КоличествоНовое Тогда
					МассивУдаления.Добавить(СтрокаДерева);
				КонецЕсли;
			КонецЦикла;	 
			
			Для каждого Элемент Из МассивУдаления Цикл
				ОчиститьРеквизитВРС(Элемент.ИдентификаторРеквизита);	
				
				ТекущийЭлементДерева.Удалить(Элемент);
			КонецЦикла;
		КонецЕсли;	
						
	//	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина); 
	//Иначе
	//	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина);
	КонецЕсли;
	
	ТекущийИдентификаторРеквизита 	= ТекущиеДанные.ИдентификаторРеквизита;
	ПодключитьОбработчикОжидания("ИзменитьЗначениеРеквизита", 0.1, Истина);

КонецПроцедуры  

&НаСервере
Процедура ДобавитьНовыеРеквизитыПоДискам(ПараметрыДанных)
	
	ОбщиеРеквизитыДиска = ПолучитьРеквизитыИзМакета("РеквизитыДиска");
	
	ТекущийЭлементДерева = ДеревоРеквизитов.НайтиПоИдентификатору(Элементы.ДеревоРеквизитов.ТекущаяСтрока).ПолучитьЭлементы();
	
	Для А = ПараметрыДанных.КоличествоТекущее+1 По ПараметрыДанных.КоличествоНовое Цикл 
		//Диск
		СтрокаДерева 						= ТекущийЭлементДерева.Добавить();	
		СтрокаДерева.Реквизит 				= "Диск "+А;  
		СтрокаДерева.ИдентификаторРеквизита = Новый УникальныйИдентификатор;
		СтрокаДерева.ИдентификаторЭлемента	= ТекущийИдентификаторЭлемента;
		СтрокаДерева.Отображать 			= Истина;
		//СтрокаДерева.ГруппировкаРеквизитов  = ПараметрыДанных.ГруппировкаСерверов;
		
		ТекущийИдентификаторРеквизита = СтрокаДерева.ИдентификаторРеквизита;
		
		Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда 			
			ЗаписатьРеквизитВРС(СтрокаДерева.Реквизит, ТекущийИдентификаторЭлемента, Ложь, ТекущаяГруппировкаСерверов, ПараметрыДанных.ВыбранныйИдентификаторРеквизита, А, Истина);
		Иначе
			ЗаписатьВсеВложенныеРеквизитыВРС(СтрокаДерева.Реквизит, Ложь, ТекущаяГруппировкаСерверов, ПараметрыДанных.ВыбранныйИдентификаторРеквизита, А, Истина);	
		КонецЕсли;
		
		Для каждого РеквизитДиска Из ОбщиеРеквизитыДиска Цикл   
			Если РеквизитДиска.Отображать Тогда
				СтрокаДереваРеквизит 						= СтрокаДерева.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваРеквизит, РеквизитДиска);
				
				СтрокаДереваРеквизит.ИдентификаторЭлемента	= ТекущийИдентификаторЭлемента;
				СтрокаДереваРеквизит.ОбязателенДляЗаполнения= Истина;
				СтрокаДереваРеквизит.РодительРеквизита		= СтрокаДерева.ИдентификаторРеквизита; 
			КонецЕсли;
			
			ТекущийИдентификаторРеквизита = РеквизитДиска.ИдентификаторРеквизита;
			
			Если ЗначениеЗаполнено(ТекущийИдентификаторЭлемента) Тогда 
				ЗаписатьРеквизитВРС(РеквизитДиска.Реквизит, ТекущийИдентификаторЭлемента, Истина, ТекущаяГруппировкаСерверов, СтрокаДерева.ИдентификаторРеквизита, РеквизитДиска.Порядок, РеквизитДиска.Отображать);
			Иначе
				ЗаписатьВсеВложенныеРеквизитыВРС(РеквизитДиска.Реквизит, Истина, ТекущаяГруппировкаСерверов, СтрокаДерева.ИдентификаторРеквизита, РеквизитДиска.Порядок, РеквизитДиска.Отображать);	
			КонецЕсли;  
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьРеквизитВРС(ИмяРеквизит, ИдентификаторЭлемента, ОбязателенДляЗаполнения, ГруппировкаСерверов, Родитель, Порядок, Отображать)
	
	Запись = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьМенеджерЗаписи();
	
	Запись.ИдентификаторЭлемента 	= ИдентификаторЭлемента; 
	Запись.ИдентификаторРеквизита 	= ТекущийИдентификаторРеквизита;
	Запись.ИмяЭлемента 				= ТекущееИмяЭлемента;
	Запись.Реквизит 				= ИмяРеквизит; 	
	Запись.ОбязателенДляЗаполнения 	= ОбязателенДляЗаполнения;	
	Запись.ГруппировкаСерверов		= ГруппировкаСерверов; 
	Запись.РодительРеквизита		= Родитель;
	Запись.МестоИспользования		= "КластерСерверов";
	Запись.Отображать				= Отображать; 
	Запись.Порядок					= Порядок;
	Запись.ГруппировкаРеквизитов	= "VMWare";
	
	Запись.Записать();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьВсеВложенныеРеквизитыВРС(ИмяРеквизит, ОбязателенДляЗаполнения, ГруппировкаСерверов, Родитель, Порядок, Отображать)
	
	МассивСерверов = Новый Массив;
	Для каждого СтрокаДерева Из ДеревоСерверов.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ИмяЭлемента <> ТекущееИмяЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаСервера Из СтрокаДерева.ПолучитьЭлементы() Цикл
			//Если СтрокаСервера.Редактируемый Тогда
				МассивСерверов.Добавить(СтрокаСервера.ИдентификаторЭлемента); 	
			//КонецЕсли;	
		КонецЦикла;
	КонецЦикла;                  
	
	Для каждого Элемент Из МассивСерверов Цикл		
		ЗаписатьРеквизитВРС(ИмяРеквизит, Элемент, ОбязателенДляЗаполнения, ГруппировкаСерверов, Родитель, Порядок, Отображать);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитВРС(ИдентификаторРеквизита)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторЭлемента КАК ИдентификаторЭлемента,
		|	_dl_ПромежуточноеЗаполнениеКЕ.ИдентификаторРеквизита КАК ИдентификаторРеквизита,
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита КАК РодительРеквизита
		|ИЗ
		|	РегистрСведений._dl_ПромежуточноеЗаполнениеКЕ КАК _dl_ПромежуточноеЗаполнениеКЕ
		|ГДЕ
		|	_dl_ПромежуточноеЗаполнениеКЕ.РодительРеквизита = &ИдентификаторРеквизита
		|	И _dl_ПромежуточноеЗаполнениеКЕ.МестоИспользования = ""КластерСерверов""";
	
	Запрос.УстановитьПараметр("ИдентификаторРеквизита", ИдентификаторРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭлемента.Установить(ТекущийИдентификаторЭлемента);
		Набор.Отбор.ИдентификаторРеквизита.Установить(Выборка.ИдентификаторРеквизита);
		Набор.Отбор.РодительРеквизита.Установить(Выборка.РодительРеквизита);
		
		Набор.Записать();		
		
	КонецЦикла;	
		
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоСерверовИмяЭлементаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущееЗначение = Текст;
	ПодключитьОбработчикОжидания("ИзменитьИмяЭлементаДереваСерверов", 0.1, Истина);		
	
КонецПроцедуры    

&НаКлиенте
Процедура ИзменитьИмяЭлементаДереваСерверов() Экспорт

	ТекущиеДанные = Элементы.ДеревоСерверов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	ИзменитьИмяЭлементаДереваСерверовНаСервере(ТекущиеДанные.ИдентификаторЭлемента, ТекущееЗначение);
	
	ОтключитьОбработчикОжидания("ИзменитьИмяЭлементаДереваСерверов");

КонецПроцедуры  

&НаСервере
Процедура ИзменитьИмяЭлементаДереваСерверовНаСервере(ИдентификаторЭлемента, ИмяЭлемента)

	Набор = РегистрыСведений._dl_ПромежуточноеЗаполнениеКЕ.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторЭлемента.Установить(ИдентификаторЭлемента); 
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		Запись.ИмяЭлемента = ИмяЭлемента;	
	КонецЦикла;           
	
	Набор.Записать();

КонецПроцедуры 


